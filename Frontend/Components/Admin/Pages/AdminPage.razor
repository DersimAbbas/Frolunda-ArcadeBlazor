@page "/admin-page"
@using Frontend.Models
@using Frontend.Services
@using User = Frontend.Models.User
@using Frontend.Components.Store.Components
@using Frontend.Components.Admin.Components
@using Frontend.Services.Interfaces
@inject IProductService ProductService
@inject IUserService UserService
@inject IOrderService OrderService
@inject ICartService CartService
@inject IHighscoresService HighscoresService

<h3 class="welcome-text">Admin Page</h3>

<div class="d-flex justify-content-center mb-5">
    <button class="btn me-2 @(IsViewingProducts ? "btn-primary" : "btn-outline-primary")"
    @onclick="() => IsViewingProducts = true">
        View Products
    </button>

    <button class="btn me-2 @(IsViewingUsers ? "btn-outline-primary" : "btn-primary")"
    @onclick="() => IsViewingUsers = true">
        View Users
    </button>

    <button class="btn @(IsViewingHighscores ? "btn-outline-primary" : "btn-primary")"
            @onclick="() => IsViewingHighscores = true">
        View Highscores
    </button>
</div>

@if(IsViewingProducts)
{
    <ProductSorter Products="_products" OnFilteredChanged="OnFilteredChanged" />

    <ProductEditor Products="_filteredProducts" 
    OnAddProduct="HandleAddProduct"/>
}
else if(IsViewingUsers)
{
    <UserEditor Users="_users" Orders="_orders" Carts="_carts"/>
}
else if(IsViewingHighscores)
{
    <HighscoresEditor HighscoresList="_highscores" />
}

@code {
    private List<Product>? _products = new();
    private List<Product> _filteredProducts = new();
    private List<Order>? _orders = new();
    private List<User>? _users = new();
    private List<Cart>? _carts = new();
    private List<Highscores>? _highscores = new();

    private bool _isViewingProducts = true;

    private bool IsViewingProducts
    {
        get => _isViewingProducts;
        set
        {
            _isViewingProducts = value;
            if(_isViewingProducts)
            {
                IsViewingUsers = false;
                IsViewingHighscores = false;
            }
            StateHasChanged();
        }
    }

    private bool _isViewingUsers = false;

    private bool IsViewingUsers
    {
        get => _isViewingUsers;
        set
        {
            _isViewingUsers = value;
            if (_isViewingUsers)
            {
                IsViewingProducts = false;
                IsViewingHighscores = false;
            }
            StateHasChanged();
        }
    }

    private bool _isViewingHighscores = false;

    private bool IsViewingHighscores
    {
        get => _isViewingHighscores;
        set
        {
            _isViewingHighscores = value;
            if (_isViewingHighscores)
            {
                IsViewingUsers = false;
                IsViewingProducts = false;
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetAllProductsAsync();
        _users = await UserService.GetAllUsersAsync();
        _orders = await OrderService.GetAllOrdersAsync();
        _carts = await CartService.GetAllCartsAsync();
        _highscores = await HighscoresService.GetAllHighscoresAsync();

        StateHasChanged();
    }

    private async Task HandleAddProduct(Product newProduct)
    {
        _products = await ProductService.GetAllProductsAsync(); 
        _filteredProducts = _products; 
        StateHasChanged(); 
    }

    private void OnFilteredChanged(List<Product> filtered)
    {
        _filteredProducts = filtered;
    }
}