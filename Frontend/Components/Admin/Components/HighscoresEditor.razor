@using Frontend.Models
@using Frontend.Services.Interfaces
@inject IHighscoresService HighscoresService

@if (HighscoresList == null || HighscoresList.Count == 0)
{
    <div class="text-center">
        <img src="images/no-results.png" alt="No highscores found" style="max-height: 300px;" />
        <p class="text-muted">No highscores available.</p>
    </div>
}
else
{
    <table class="table table-bordered align-middle text-light">
        <thead class="table-dark">
            <tr>
                <th>Game</th>
                <th>Users & Scores</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hs in PaginatedHighscores)
            {
                <tr>
                    <td>@hs.Name</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-secondary mb-1" @onclick="() => ToggleExpanded(hs.Id)">
                            @(ExpandedRows.Contains(hs.Id) ? "▲" : "▼")
                        </button>
                        @if (ExpandedRows.Contains(hs.Id))
                        {
                            <div class="mt-2 text-start">
                                <table class="table table-sm table-striped text-light border">
                                    <thead>
                                        <tr>
                                            <th>User</th>
                                            <th>Score</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var entry in hs.UserScores)
                                        {
                                            <tr>
                                                <td>
                                                    <input class="form-control form-control-sm" value="@entry.Key" disabled />
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm"
                                                    @bind="hs.UserScores[entry.Key]" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            //Change to username when implemented
                            <div class="mt-3">
                                <div class="input-group input-group-sm">
                                    <input class="form-control" placeholder="User ID" @bind="_newUserID" />
                                    <button class="btn btn-outline-success" @onclick="() => AddUserScore(hs)">Add</button>
                                </div>
                            </div>
                        }
                    </td>
                    <td class="text-center align-middle">
                        <button class="btn btn-success btn-sm w-100" @onclick="() => UpdateHighscoreAsync(hs)">Update</button>
                        <button class="btn btn-danger btn-sm w-100" @onclick="() => DeleteHighscoresAsync(hs.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Next</button>
    </div>
}

<button class="btn btn-primary mt-3" @onclick="() => ShowAddDialog = true">Add Highscore Set</button>

<!--<AddHighscoresDialog Visible="ShowAddDialog"
OnCancel="() => ShowAddDialog = false"
OnAdd="AddHighscoreAsync" />-->

@code {
    [Parameter] public List<Highscores> HighscoresList { get; set; } = new();
    [Parameter] public EventCallback OnChange { get; set; }

    private HashSet<string> ExpandedRows = new();

    private string _newUserID = string.Empty;

    private int PageSize = 10;
    private int CurrentPage = 1;

    private bool ShowAddDialog = false;

    private IEnumerable<Highscores> PaginatedHighscores =>
        HighscoresList.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)HighscoresList.Count / PageSize));
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private void PreviousPage() => CurrentPage = Math.Max(CurrentPage - 1, 1);
    private void NextPage() => CurrentPage = Math.Min(CurrentPage + 1, TotalPages);

    private async Task UpdateHighscoreAsync(Highscores hs)
    {
        foreach (var entry in hs.UserScores)
        {
            await HighscoresService.UpdateUserHighscoreAsync(hs.Id, entry.Key, entry.Value);
        }

        await OnChange.InvokeAsync();
    }

    private async Task DeleteHighscoresAsync(string id)
    {
        await HighscoresService.DeleteHighscoresAsync(id);
        await OnChange.InvokeAsync();
    }

    private async Task AddHighscoreAsync(string name)
    {
        await HighscoresService.AddNewHighscoresAsync(name);
        ShowAddDialog = false;
        await OnChange.InvokeAsync();
    }

    private void ToggleExpanded(string id)
    {
        if (!ExpandedRows.Add(id))
        {
            ExpandedRows.Remove(id);
        }
        else
        {
            ExpandedRows.Clear();
            ExpandedRows.Add(id);
            _newUserID = string.Empty;
        }
    }

    private async Task AddUserScore(Highscores hs)
    {
        //Change to username when implemented
        var Id = _newUserID.Trim();

        if (string.IsNullOrWhiteSpace(Id) || hs.UserScores.ContainsKey(Id))
            return;

        var response = await HighscoresService.UpdateUserHighscoreAsync(hs.Id, Id, 0);
        if (!response) { return; }

        hs.UserScores.Add(Id, 0);
        _newUserID = string.Empty;

        StateHasChanged();
    }
}