@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@inject IProductService ProductService
@if (Visible)
{
    <div class="modal-overlay">
        <div class="modal-content bg-dark text-light rounded p-4 shadow">
            <h4>Add New Product</h4>
            <div class="form-group mb-3">
                <label>Name</label>
                <input class="form-control" @bind="NewProduct.Name" />
            </div>
            <div class="form-group mb-3">
                <label>Description</label>
                <input class="form-control" @bind="NewProduct.Description" />
            </div>
            <div class="form-group mb-3">
                <label>Price</label>
                <input class="form-control" type="number" step="0.01" @bind="NewProduct.Price" />
            </div>
            <div class="form-group mb-3">
                <label>Genre</label>
                <input class="form-control" @bind="NewProduct.Genre" />
            </div>
            <div>
                <label>Status</label>
                <select class="form-select" @bind="NewProduct.Status">
                    <option value="available">Available</option>
                    <option value="unavailable">Unavailable</option>
                </select>
            </div>
            <div class="form-group mb-3">
                <label>Age Rating</label>
                <input class="form-control" type="number" @bind="NewProduct.AgeRating" />
            </div>
            <div class="form-group mb-3">
                <label>Image Link</label>
                <input class="form-control" @bind="NewProduct.ImageLink" />
            </div>

            <div class="d-flex justify-content-end gap-2 mt-4">
                <button class="arcade-btn btn-secondary" @onclick="OnCancel">Cancel</button>
                <button class="arcade-btn btn-primary" @onclick="HandleAdd">Add</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<Product> OnAdd { get; set; }

    private Product NewProduct { get; set; } = new();

    private async Task HandleAdd()
    {
        await OnAdd.InvokeAsync(NewProduct);
        NewProduct = new();
    }
}