@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@using User = Frontend.Models.User
@inject IFirebaseAuthService FirebaseAuthService
@inject IJSRuntime JsRuntime
@inject FirebaseAuthClient FirebaseAuthClient
@inject IUserService UserService

@if (Visible)
{
    <div class="modal-overlay">
        <div class="modal-content bg-dark text-light p-4 shadow" style="background-color: #444444; border: 1px solid #5e5e5e; border-radius: 2%; max-width: 600px; margin: auto;">
            <h4 class="text-center generic-text mb-4" style="color: #EDEDED;">Leave a Review</h4>

            <div class="form-group mb-3">
                <label class="form-label generic-text-size generic-text ">Title</label>
                <input class="form-control bg-dark text-light border-secondary" @bind="NewReview.Title" />
            </div>

            <div class="form-group mb-3">
                <label class="form-label generic-text-size generic-text ">Comment</label>
                <textarea class="form-control bg-dark text-light border-secondary" rows="4" @bind="NewReview.Comment" style="resize: vertical;"></textarea>
            </div>

            <div class="form-group mb-3">
                <label class="form-label generic-text-size generic-text ">Rating</label>
                <div class="stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var ratingValue = i;
                        <span class="star" @onclick="() => SetRating(ratingValue)">
                            @((ratingValue <= NewReview.Ratings) ? "★" : "☆")
                        </span>
                    }
                </div>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-4">
                <button class="btn px-4 generic-text-size generic-text" style="background-color: #6c757d; border-color: #6c757d;" @onclick="HandleCancel">Cancel</button>
                <button class="btn px-4 generic-text-size generic-text" style="background-color: #bf1f1f; border-color: #DA0037;" @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public EventCallback<Review> OnSubmit { get; set; }
    [Parameter] public Product SelectedProduct { get; set; }
    private Review NewReview { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;
        
        var reviewProduct = new CartProductDto()
        {
            Id = SelectedProduct.Id,
            ImageLink = SelectedProduct.ImageLink,
            Name = SelectedProduct.Name,
            Price = SelectedProduct.Price
        };
        
        NewReview = new Review
        {
            Ratings = 1,
            User = new User(),
            Product = reviewProduct
        };

        var token = await JsRuntime.InvokeAsync<string>("getCookie", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var tokenVerified = await FirebaseAuthService.VerifyTokenAsync(token);

            if (tokenVerified && FirebaseAuthClient.User is not null)
            {
                var firebaseAuthUserId = FirebaseAuthClient.User.Uid;
                NewReview.User = await UserService.GetUserByIdAsync(firebaseAuthUserId);

                StateHasChanged();
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrWhiteSpace(NewReview.Title) && !string.IsNullOrWhiteSpace(NewReview.Comment))
        {
            await OnSubmit.InvokeAsync(NewReview);
            await CloseDialog();
        }
    }

    private async Task HandleCancel() => await CloseDialog();

    private async Task CloseDialog()
    {
        NewReview = new()
            {
                Ratings = 1,
                User = new User()
            };
        await VisibleChanged.InvokeAsync(false);
    }

    private void SetRating(int rating)
    {
        NewReview.Ratings = rating;
    }
}

<style>
    .stars {
        display: flex;
        gap: 5px;
        cursor: pointer;
    }

    .star {
        font-size: 1.5rem;
        color: #ffcc00;
    }

        .star:hover {
            color: #ffaa00;
        }
</style>