@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@inject IProductService ProductService

<div style="font-family: 'Futura', sans-serif;">
    @if (Reviews != null && Reviews.Any())
    {
        var displayedReviews = _showAllReviews ? Reviews : Reviews.Take(3);

        foreach (var review in displayedReviews)
        {
            <div class="p-4 mb-4" style="border: 1px solid #5e5e5e; border-radius: 8px; color: #EDEDED;">
                <div class="d-flex flex-column flex-lg-row justify-content-between align-items-start align-items-lg-center mb-2">
                    <div class="fw-semibold mb-2 mb-lg-0 text-break" style="font-size: 0.95rem;">
                        @review.User.Username
                    </div>
                    <div class="text-warning d-flex gap-1">
                        @for (int i = 0; i < 5; i++)
                        {
                            <span style="font-size: 20px;">@((i < review.Ratings) ? "★" : "☆")</span>
                        }
                    </div>
                </div>

                <div class="mb-1">
                    <h6 class="fw-bold mb-0 text-break">
                        @review.Title
                    </h6>
                </div>

                <div>
                    @if (review.Comment.Length > 100)
                    {
                        <p class="review-preview text-break mb-2">
                            @review.Comment.Substring(0, 100)...
                        </p>
                        <button class="btn btn-outline-light btn-sm" @onclick="() => OpenFullReview(review)">Read Full Review</button>
                    }
                    else
                    {
                        <p class="mb-0 text-break" style="white-space: pre-wrap;">
                            @review.Comment
                        </p>
                    }
                </div>
            </div>
        }

        @if (_selectedReview != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.6);">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content" style="background-color: #444444; color: #EDEDED;">
                        <div class="modal-header">
                            <div>
                            <h5 class="modal-title">@_selectedReview.Title</h5>
                            <div class="text-warning d-flex gap-1">
                                @for (int i = 0; i < 5; i++)
                                {
                                    <span style="font-size: 20px;">@((i < _selectedReview.Ratings) ? "★" : "☆")</span>
                                }
                            </div>
                            </div>
                            <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                        </div>
                        <div class="modal-body">
                            <p style="font-size: 1.2rem; white-space: pre-wrap;">@_selectedReview.Comment</p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn px-4 generic-text-size generic-text" style="background-color: #6c757d; border-color: #6c757d;" @onclick="CloseModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Reviews.Count > 3)
        {
            <div class="text-center mb-3">
                <button class="simple-arcade-btn px-4" style="background-color: #6c757d; border-color: #6c757d;" @onclick="ToggleReviews">
                    @(_showAllReviews ? "Show Less" : "Show All Reviews")
                </button>
            </div>
        }

        <div class="text-center">
            <button class="simple-arcade-btn px-4" style="background-color: #bf1f1f; border-color: #DA0037;" @onclick="() => _isDialogOpen = true">
                Leave a Review
            </button>
        </div>
    }
    else
    {
        <div class="text-center p-4" style="background-color: #444444; border: 1px solid #5e5e5e; border-radius: 2%; color: #EDEDED;">
            <p>No reviews yet. Be the first to leave one!</p>
            <button class="btn px-4 generic-text generic-text-size mt-2" style="background-color: #bf1f1f; border-color: #DA0037;" @onclick="() => _isDialogOpen = true">
                Leave a Review
            </button>
        </div>
    }

    <LeaveReviewDialog Visible="@_isDialogOpen"
                       SelectedProduct="SelectedProduct"
                       VisibleChanged="@((bool val) => _isDialogOpen = val)"
                       OnSubmit="HandleNewReview" />
</div>

@code {
    [Parameter] public List<Review> Reviews { get; set; } = new();
    [Parameter] public Product SelectedProduct { get; set; }

    private bool _showAllReviews = false;
    private bool _isDialogOpen = false;
    private Review? _selectedReview = null;

    private void ToggleReviews() => _showAllReviews = !_showAllReviews;

    private void OpenFullReview(Review review) => _selectedReview = review;

    private void CloseModal() => _selectedReview = null;

    protected override async Task OnInitializedAsync()
    {
        Reviews = await ProductService.GetReviewsByProductIdAsync(SelectedProduct.Id) ?? new List<Review>();
    }

    private async Task HandleNewReview(Review review)
    {
        var response = await ProductService.AddReviewAsync(SelectedProduct.Id, review);
        if (response)
        {
            Reviews = await ProductService.GetReviewsByProductIdAsync(SelectedProduct.Id);
            StateHasChanged();
        }
        else
        {
            // If error give popup
        }
    }
}