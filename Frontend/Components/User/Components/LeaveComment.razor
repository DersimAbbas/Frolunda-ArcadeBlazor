@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services.Interfaces
@using User = Frontend.Models.User
@inject IForumService ForumService
@inject IJSRuntime JsRuntime
@inject IFirebaseAuthService FirebaseAuthService
@inject FirebaseAuthClient FirebaseAuthClient
@inject IUserService UserService

<div >
    <h4 class="mb-3 text-center">Leave a Comment</h4>

    <EditForm Model="@_newComment" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mb-3">
            <label for="titleInput" class="form-label">Title</label>
            <input type="text" id="titleInput" class="form-control text-white border-secondary"
                   @bind="_newComment.Title" placeholder="Enter a title..." required/>
        </div>

        <div class="mb-3">
            <label for="commentText" class="form-label">Your Comment</label>
            <textarea id="commentText" class="form-control text-white border-secondary"
                      @bind="_newComment.Comment" rows="5" placeholder="Write your comment here..." required></textarea>
        </div>

        <div class="d-flex justify-content-end">
            <button type="submit" class="arcade-btn">Submit</button>
        </div>
    </EditForm>
    
</div>

@code {
    [Parameter] public string PostId { get; set; }
    [Parameter] public EventCallback OnCommentSubmitted { get; set; }

    private User CurrentUser { get; set; }

    private ForumComment _newComment = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        var token = await JsRuntime.InvokeAsync<string>("getCookie", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var tokenVerified = await FirebaseAuthService.VerifyTokenAsync(token);

            if (tokenVerified && FirebaseAuthClient.User is not null)
            {
                var firebaseAuthUserId = FirebaseAuthClient.User.Uid;
                CurrentUser = await UserService.GetUserByIdAsync(firebaseAuthUserId);

                StateHasChanged();
            } 
        }

    }

    private async Task HandleSubmit()
    {
        _newComment.User = CurrentUser;
        
        await ForumService.AddForumPostComment(PostId, _newComment);

        _newComment = new ForumComment();
        
        await OnCommentSubmitted.InvokeAsync();

        StateHasChanged();
    }

}