@page "/"
@using Frontend.Components.User.Components
@using Frontend.Models
@using Frontend.Services.Interfaces
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IProductService ProductService
@inject IFirebaseAuthService FirebaseAuthService
@inject IOrderService OrderService
@inject IJSRuntime JsRuntime

<PageTitle>Home</PageTitle>

<div class="welcome-text text-center mb-5">Welcome to Frölunda Arcade!</div>

<div class="container-fluid">

</div>

<div class="d-flex flex-column flex-md-row justify-content-center gap-5 m-5">
    <div class="col-12 col-md-7">
        <div class="generic-text fw-bold mb-1">
            Step into the world of Frölunda Arcade — where nostalgia meets next-gen gaming!
        </div>
        <div class="generic-text">
            From epic tournaments to laid-back board game nights, we bring gamers of all kinds together under one pixel-perfect roof. Whether you're chasing high scores or just here for the vibe, you're always welcome at Frölunda Arcade.
        </div>
    </div>
    <div class="col-12 col-md-3 d-flex flex-column justify-content-center">
        <div class="generic-text mb-3">
            Discover a world of classic and modern gaming at Frölunda Arcade
        </div>
        <button type="button" class="arcade-btn arcade-text" @onclick='() => Navigation.NavigateTo("/store-front")'>
            View Products
        </button>
    </div>
</div>

<EventCarousel Events="@DemoEvents" AutoScrollInterval="5000" />

<RecommendedProducts _cachedProducts="_products" AutoScrollInterval="5000"/>

@code {
    private List<Product> _products = new();
    private bool _userOrdersExist = false;
    private const string _imageMapKey = "productImageMap";
    private const string _funcTrigger = "https://frolunda-arcadefunc.azurewebsites.net/api/GetImageFunction";

    private List<EventCarousel.Event> DemoEvents = new()
    {
        new EventCarousel.Event { Name = "Retro Game Night", Description = "Play classics all evening!", Date = DateTime.Today.AddDays(1), Participants = new() },
        new EventCarousel.Event { Name = "Street Fighter Showdown", Description = "Who’s the best fighter?", Date = DateTime.Today.AddDays(3), Participants = new() },
        new EventCarousel.Event { Name = "Mario Kart Madness", Description = "Fast-paced kart battles!", Date = DateTime.Today.AddDays(5), Participants = new() },
        new EventCarousel.Event { Name = "Indie Game Expo", Description = "Discover local devs' creations", Date = DateTime.Today.AddDays(7), Participants = new() },
        new EventCarousel.Event { Name = "LAN Party Weekend", Description = "Bring your rig and join the fun!", Date = DateTime.Today.AddDays(9), Participants = new() },
        new EventCarousel.Event { Name = "Pinball Tournament", Description = "Compete for the highest score!", Date = DateTime.Today.AddDays(11), Participants = new() },
        new EventCarousel.Event { Name = "VR Experience Night", Description = "Explore virtual worlds together", Date = DateTime.Today.AddDays(13), Participants = new() },
        new EventCarousel.Event { Name = "Smash Bros Bash", Description = "Ultimate showdown of legends", Date = DateTime.Today.AddDays(15), Participants = new() },
        new EventCarousel.Event { Name = "Horror Game Marathon", Description = "Scary games till midnight!", Date = DateTime.Today.AddDays(17), Participants = new() },
        new EventCarousel.Event { Name = "Speedrun Sunday", Description = "Show off your best speedruns!", Date = DateTime.Today.AddDays(19), Participants = new() },
        new EventCarousel.Event { Name = "Board Game Bonanza", Description = "Take a break from screens", Date = DateTime.Today.AddDays(21), Participants = new() }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) { return; }

        _products = await ProductService.GetAllProductsAsync();

        await AssignImageMaps();

        StateHasChanged();
    }
    private async Task AssignImageMaps()
    {
        var rawJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", _imageMapKey);
        Dictionary<string, string>? imageMap = null;

        if (!string.IsNullOrWhiteSpace(rawJson))
            imageMap = JsonSerializer.Deserialize<Dictionary<string, string>>(rawJson);

        if (imageMap == null)
        {
            imageMap = await Http.GetFromJsonAsync<Dictionary<string, string>>(_funcTrigger);
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", _imageMapKey,
                JsonSerializer.Serialize(imageMap));
        }

        if (imageMap != null)
        {
            foreach (var product in _products!)
            {
                var matchKey = imageMap.Keys
                 .FirstOrDefault(k =>
                     string.Equals(k, product.Name, StringComparison.OrdinalIgnoreCase)
                 );

                if (matchKey != null && imageMap.TryGetValue(matchKey, out var url))
                {
                    product.ImageLink = url;
                }

            }
            await InvokeAsync(StateHasChanged);
        }
    }

}