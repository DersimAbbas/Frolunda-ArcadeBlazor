@page "/post/{PostId}"
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services.Interfaces
@using Frontend.Components.User.Components
@inject NavigationManager Navigation
@inject IForumService ForumService
@inject IJSRuntime JsRuntime
@inject IFirebaseAuthService FirebaseAuthService
@inject FirebaseAuthClient FirebaseAuthClient
@inject IUserService UserService

<h2 class="text-center welcome-text mb-5">Forum Post</h2>


@if (ForumPost.Id == null)
{
    <LoadingAnimation LoadingText="Loading..."/>
}
else
{
    <div class="container text-light">
        <div class="arcade-post-card p-4">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="fw-bold">@ForumPost.Title</h3>
                <span class="text-muted">@ForumPost.Created.ToString("yyyy-MM-dd HH:mm")</span>
            </div>

            <div class="my-2">
                <span class="badge arcade-badge">@ForumPost.Category</span>
                <span class="ms-2">by <strong>@ForumPost.Author.Username</strong></span>
            </div>

            <p class="mt-4 fs-5">@ForumPost.Content</p>

            @if (CurrentUserEmail == ForumPost.Author.Email || IsCurrentUserAdmin)
            {
                <div class="mt-4">
                    <button class="btn btn-danger arcade-shadow" @onclick="DeletePost">ðŸ—‘ Delete Post</button>
                </div>
            }

            <div class="mt-5">
                <LeaveComment PostId="@PostId" OnCommentSubmitted="RefreshPost"/>
            </div>

            <div class="mt-4">
                <button class="simple-arcade-btn" @onclick="GoBack">Back to Forum</button>
            </div>
        </div>

        <div class="mt-5">
            <h4 class="welcome-text">Comments</h4>

            @if (ForumPost.Comments?.Any() == true)
            {
                @foreach (var comment in ForumPost.Comments.OrderByDescending(c => c.Created))
                {
                    <div class="arcade-comment-card p-3 mb-4">
                        <div class="d-flex justify-content-between">
                            <strong>@comment.Title</strong>
                            <small>@comment.Created.ToString("yyyy-MM-dd HH:mm")</small>
                        </div>
                        <div class="my-2">@comment.Comment</div>
                        <div class="text-end text-light">
                            â€” <em>@comment.User.Username</em>
                        </div>

                        @if (IsCurrentUserAdmin)
                        {
                            <div class="text-end mt-2">
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteComment(comment)">
                                    Delete Comment
                                </button>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="text-center fst-italic text-secondary mt-3">
                    No comments yet. Be the first to reply!
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string PostId { get; set; }

    private ForumPost? ForumPost { get; set; }
    private string CurrentUserEmail { get; set; }
    private bool IsCurrentUserAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ForumPost = await ForumService.GetForumPostByIdAsync(PostId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var token = await JsRuntime.InvokeAsync<string>("getCookie", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var tokenVerified = await FirebaseAuthService.VerifyTokenAsync(token);

            if (tokenVerified && FirebaseAuthClient.User is not null)
            {
                var firebaseAuthUserId = FirebaseAuthClient.User.Uid;
                var user = await UserService.GetUserByIdAsync(firebaseAuthUserId);
                CurrentUserEmail = user.Email;
                IsCurrentUserAdmin = user.Role == "admin";
                StateHasChanged();
            }
        }
    }

    private void GoBack() => Navigation.NavigateTo("/forum");

    private async void DeletePost()
    {
        await ForumService.DeleteForumPostAsync(PostId);
        Navigation.NavigateTo("/forum");
    }

    private async Task RefreshPost()
    {
        ForumPost = await ForumService.GetForumPostByIdAsync(PostId);
        StateHasChanged();
    }

    private async Task DeleteComment(ForumComment forumComment)
    {
        await ForumService.DeleteForumPostComment(PostId, forumComment);
        await RefreshPost();
    }

}

