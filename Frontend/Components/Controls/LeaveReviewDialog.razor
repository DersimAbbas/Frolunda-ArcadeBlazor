@using Frontend.Models

@if (Visible)
{
    <div class="modal-overlay">
        <div class="modal-content bg-dark text-light rounded p-4 shadow">
            <h4>Leave a Review</h4>

            <div class="form-group mb-3">
                <label>Title</label>
                <input class="form-control" @bind="NewReview.Title" />
            </div>

            <div class="form-group mb-3">
                <label>Comment</label>
                <textarea class="form-control" rows="4" @bind="NewReview.Comment"></textarea>
            </div>

            <div class="form-group mb-3">
                <label>Rating</label>
                <div class="stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var ratingValue = i;
                        <span class="star" @onclick="() => SetRating(ratingValue)">
                            @((ratingValue <= NewReview.Ratings) ? "★" : "☆")
                        </span>
                    }
                </div>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-4">
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                <button class="btn btn-primary" @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public EventCallback<Review> OnSubmit { get; set; }

    private Review NewReview { get; set; } = new()
        {
            Ratings = 1,
            User = new User { FirstName = "Anonymous", LastName = "" }
        };

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrWhiteSpace(NewReview.Title) && !string.IsNullOrWhiteSpace(NewReview.Comment))
        {
            await OnSubmit.InvokeAsync(NewReview);
            await CloseDialog();
        }
    }

    private async Task HandleCancel() => await CloseDialog();

    private async Task CloseDialog()
    {
        NewReview = new()
            {
                Ratings = 1,
                User = new User { FirstName = "Anonymous", LastName = "" }
            };
        await VisibleChanged.InvokeAsync(false);
    }

    private void SetRating(int rating)
    {
        NewReview.Ratings = rating;
    }
}

<style>
    .stars {
        display: flex;
        gap: 5px;
        cursor: pointer;
    }

    .star {
        font-size: 1.5rem;
        color: #ffcc00;
    }

        .star:hover {
            color: #ffaa00;
        }
</style>