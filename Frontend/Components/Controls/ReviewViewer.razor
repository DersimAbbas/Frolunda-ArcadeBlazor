@using Frontend.Models
@using Frontend.Services
@inject IReviewService ReviewService

<div>
    @if (Reviews != null && Reviews.Any())
    {
        var displayedReviews = showAllReviews
        ? Reviews
        : Reviews.Take(3);

        foreach (var review in displayedReviews)
        {
            <div class="review mb-4">
                <strong>@review.User.FirstName @review.User.LastName</strong>
                <div class="text-warning">
                    @for (int i = 0; i < 5; i++)
                    {
                        <span class="me-1">@((i < review.Ratings) ? "★" : "☆")</span>
                    }
                </div>
                <h6 class="mt-1">@review.Title</h6>
                <p>@review.Comment</p>
            </div>
        }

        @if (Reviews.Count > 3)
        {
            <div class="mb-2">
                <button class="btn btn-outline-light" @onclick="ToggleReviews">
                    @(showAllReviews ? "Show Less" : "Show All Reviews")
                </button>
            </div>
        }

        <button class="btn btn-light mt-2" @onclick="() => isDialogOpen = true">Leave a review</button>
    }
    else
    {
        <p>No reviews yet. Be the first to leave one!</p>
        <button class="btn btn-light mt-2" @onclick="() => isDialogOpen = true">Leave a review</button>
    }

    <LeaveReviewDialog Visible="@isDialogOpen" VisibleChanged="@((bool val) => isDialogOpen = val)" OnSubmit="HandleNewReview" />
</div>

@code {
    [Parameter] public List<Review> Reviews { get; set; } = new();
    private bool showAllReviews = false;
    private bool isDialogOpen = false;

    private void ToggleReviews() => showAllReviews = !showAllReviews;

    private async Task HandleNewReview(Review review)
    {
        /*var success = await ReviewService.AddReview(review);
        if (success)
        {
            Reviews.Add(review);
            }
        else
        {
            //Add error message to page
            Console.WriteLine("Failed to add review");
        }*/
        //Remove this when products are added
        await Task.Delay(1);
        Reviews.Add(review);
    }
}