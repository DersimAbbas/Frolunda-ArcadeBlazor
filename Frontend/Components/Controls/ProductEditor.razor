@using Frontend.Models
@using Frontend.Services
@inject IProductService product_Service
@if (Products == null || Products.Count == 0)
{
    <div class="text-center">
        <img src="images/no-results.png" alt="No products found" style="max-height: 300px;" />
        <p class="text-muted">No products match the current filters.</p>
    </div>
}
else
{
    <table class="table table-bordered align-middle text-light">
        <thead class="table-dark">
            <tr>
                <th>Img</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Genre</th>
                <th>Status</th>
                <th>Age Rating</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in PaginatedProducts)
            {
                <tr>
                    <td class="text-center">
                        <button class="btn btn-sm btn-secondary mb-1" @onclick="() => ToggleImage(product.Id)">
                            @(ExpandedRows.Contains(product.Id) ? "▲" : "▼")
                        </button>
                        @if (ExpandedRows.Contains(product.Id))
                        {
                            <div class="mt-2">
                                <img src="@product.ImageLink" width="60" height="60" class="img-thumbnail" />
                                <input class="form-control mt-1" @bind="product.ImageLink" />
                            </div>
                        }
                    </td>
                    <td><input class="form-control" @bind="product.Name" /></td>
                    <td><input class="form-control" @bind="product.Description" /></td>
                    <td><input type="number" step="0.01" class="form-control" @bind="product.Price" /></td>
                    <td><input class="form-control" @bind="product.Genre" /></td>
                    <td>
                        <select class="form-select" @bind="product.Status">
                            <option value="available">Available</option>
                            <option value="unavailable">Unavailable</option>
                        </select>
                    </td>
                    <td><input type="number" class="form-control" @bind="product.AgeRating" /></td>
                    <td class="text-center align-middle">
                        <button class="btn btn-success btn-sm w-100" @onclick="() => UpdateProductAsync(product)">Update</button>
                        <button class="btn btn-danger btn-sm w-100" @onclick="() => DeleteProduct(product)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Next</button>
    </div>

    <button class="btn btn-primary mt-3" @onclick="() => showAddDialog = true">Add Product</button>

    <AddProductDialog Visible="showAddDialog"
    OnCancel="() => showAddDialog = false"
    OnAdd="AddProductAsync" />
}

@code {
    [Parameter] public List<Product> Products { get; set; } = new();
    [Parameter] public EventCallback<Product> OnUpdate { get; set; }
    [Parameter] public EventCallback<string> OnDelete { get; set; }
    [Parameter] public Product Product { get; set; } = default!;
    [Parameter] public EventCallback<Product> OnAddProduct { get; set; }

    private HashSet<string> ExpandedRows = new();

    // Pagination
    private int PageSize = 15;
    private int CurrentPage = 1;

    private IEnumerable<Product> PaginatedProducts =>
        Products.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)Products.Count / PageSize));
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private bool showAddDialog = false;

    private async Task AddProductAsync(Product newProduct)
    {
        await Task.Delay(1);
        //Call add product service
        //Product = newProduct;
        await product_Service.AddProduct(newProduct);
        await OnAddProduct.InvokeAsync(newProduct);
        showAddDialog = false;

        await LoadProductsAsync();
        StateHasChanged();

    }

    private async Task LoadProductsAsync()
    {
        await Task.Delay(1);
        Products = await product_Service.GetAllProductsAsync();
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
            CurrentPage--;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
            CurrentPage++;
    }

    private void ToggleImage(string id)
    {
        if (!ExpandedRows.Add(id))
        {
            ExpandedRows.Remove(id);
        }
    }

    private async Task UpdateProductAsync(Product product)
    {
        var request = await product_Service.UpdateProduct(product.Id, product);
    }

    private async Task DeleteProduct(Product product)
    {
        var response = await product_Service.DeleteProduct(product.Id);
        await LoadProductsAsync();
        //await OnDelete.InvokeAsync(product.Id);
        StateHasChanged();
    }


        
        
}