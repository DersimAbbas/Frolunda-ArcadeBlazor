@using Firebase.Auth
@using FirebaseAdmin.Auth
@using Frontend.Services
@using Frontend.Models
@inject ILocalCartStorageService LocalCartStorageService
@inject IProductService ProductService
@inject IFirebaseAuthService FirebaseAuthService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

    @if (Visible)
    {
    <div id="cartPopup" class="shopping-cart-popup" @onclick="() => {}" @onclick:stopPropagation="true">
            <h3>Your Cart</h3>
            <hr />

            @if (CartItems.Count == 0)
            {
                <p>Your cart is empty.</p>
            }
            else
            {
                <ul class="list-unstyled">
                    @foreach (var item in CartItems)
                    {
                        <li class="mb-3">
                            <strong>@item.Product.Name</strong>
                            <span>× @item.Quantity</span>
                            <br />
                            <button class="btn btn-sm btn-danger mt-1" @onclick="() => RemoveFromCart(item.Product.Id)">Remove</button>
                        </li>
                    }
                </ul>

                <hr />
                <button class="btn btn-secondary" @onclick="ClearCart">Clear Cart</button>
            }
        </div>
    }

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private DotNetObjectReference<ShoppingCart>? dotNetRef;

    private bool isFirstRender = true;

    private List<(Product Product, int Quantity)> CartItems = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            LocalCartStorageService.OnChange += RefreshCart;
            await JSRuntime.InvokeVoidAsync("cartInterop.registerOutsideClick", "cartPopup", dotNetRef, "cartToggleButton");
            await LoadCart();
        }
    }

    private async Task LoadCart()
    {
        var token = await JSRuntime.InvokeAsync<string>("getCookie", "token");
        var user = FirebaseAuthService.VerifyTokenAsync(token);

        if (user is null)
        {
            CartItems = new List<(Product, int)>();
            return;
        }

        await LocalCartStorageService.LoadCartAsync();

        var allProducts = new List<Product>();

        try
        {
            allProducts = await ProductService.GetAllProductsAsync();
        }
        catch
        {
            DummyData.CreateAdminPageDummyData.GetDummyProducts();
        }

        CartItems = LocalCartStorageService.Cart.Select(kvp =>
        {
            var product = allProducts.FirstOrDefault(p => p.Id == kvp.Key) ?? new Product { Id = kvp.Key, Name = "Unknown", Price = 0 };
            return (product, kvp.Value);
        }).ToList();
    }

    private void RefreshCart() => InvokeAsync(LoadCart);

    private async Task RemoveFromCart(string productId)
    {
        LocalCartStorageService.Cart.Remove(productId);
        await LocalCartStorageService.SaveCartAsync();
        StateHasChanged();
    }

    private async Task ClearCart()
    {
        LocalCartStorageService.Cart.Clear();
        await LocalCartStorageService.SaveCartAsync();
        StateHasChanged();
    }

    [JSInvokable]
    public Task CloseCart() => OnClose.InvokeAsync();

    public async ValueTask DisposeAsync()
    {
        dotNetRef?.Dispose();
        await JSRuntime.InvokeVoidAsync("cartInterop.unregisterOutsideClick");
    }
}