@using Frontend.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

<div class="checkout-sidebar p-4 text-light">
    <div class="checkout-sidebar-content">
        @if (Product is not null)
        {
            <h3>@Product.Name</h3>
            <hr />
            <p><strong>Price:</strong> $@Product.Price</p>
            <div class="d-flex justify-content-between align-items-center">
                <button class="btn btn-primary" @onclick="() => AddToCart(Product)">Add to Cart</button>
            </div>
        }
        else
        {
            <p>No product selected</p>
        }
    </div>
</div>

@code {
    [Parameter] public Product Product { get; set; }

    private Dictionary<string, int> cart = new();
    private bool cartLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !cartLoaded)
        {
            cart = await GetShoppingCart();
            cartLoaded = true;
            StateHasChanged();
        }
    }

    private async Task<Dictionary<string, int>> GetShoppingCart()
    {
        var result = await ProtectedLocalStore.GetAsync<Dictionary<string, int>>("cart");
        return result.Success ? result.Value : new Dictionary<string, int>();
    }

    private async Task AddToCart(Product product)
    {
        if (cart.ContainsKey(product.Id))
        {
            cart[product.Id]++;
        }
        else
        {
            cart[product.Id] = 1;
        }
        await ProtectedLocalStore.SetAsync("cart", cart);
    }
}

<link rel="stylesheet" href="css/CheckoutSidebarStyle.css" />