@page "/checkout"
@using Frontend.Models
@using Frontend.Services
@using Stripe
@inject IJSRuntime JSRuntime
@inject IPaymentService PaymentService
@inject IProductService ProductService
@inject ILocalCartStorageService CartStorageService
<h3>Checkout</h3>

<div class="form-group d-flex flex-column gap-2 text-light">
    <label>Name</label>
    <input class="form-control p-2" @bind="CustomerName" />

    <label>Email</label>
    <input class="form-control p-2" @bind="CustomerEmail" />

    <label>Card Number</label>
    <div id="card-number-element" class="form-control p-3"></div>

    <label>Expiry Date</label>
    <div id="card-expiry-element" class="form-control p-3"></div>

    <label>CVC</label>
    <div id="card-cvc-element" class="form-control p-3"></div>

    <label>Postal Code</label>
    <div id="card-postal-element" class="form-control p-3"></div>
</div>

<div id="card-errors" class="text-danger mb-2"></div>

<button class="btn btn-primary" @onclick="HandleCheckout">Pay</button>

@if (PaymentComplete)
{
    <div id="receipt-overlay" class="receipt-overlay">
        <ReceiptPopup TicketNumber="R2-9R-S2"
                      DateTime="@DateTime.Now.ToString("yyyy-MM-dd, HH:mm:ss")"
                      Cart="@CartStorageService.Cart"
                      Products="@AllProducts"
                      Amount="@Amount"
                      OnClose="@(() => PaymentComplete = false)" />
    </div>
}

@code {
    private string PaymentMethodId { get; set; } = string.Empty;
    private decimal Amount { get; set; }

    private List<Models.Product> AllProducts = new();
    private Dictionary<string, int> CartItems = new();

    private string CustomerName = "";
    private string CustomerEmail = "";

    private string StatusMessage = "";

    private bool PaymentComplete = false;
    private DotNetObjectReference<Checkout>? _dotNetRef;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CartItems = CartStorageService.Cart;
            AllProducts = await ProductService.GetAllProductsAsync();
            Amount = CartStorageService.GetCartCost(AllProducts);
            await JSRuntime.InvokeVoidAsync("stripeInterop.initStripe", "pk_test_51RH08UGb53lseiZnINEQMqyRvewkBu0ilq4bUUB2FVlwHUxD4sPcBK7dir8yUtrh2Hxw5iZYZxXnUL4cNX4l7d6Y00jd0I1nhf");
        }

        if (PaymentComplete && _dotNetRef == null)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("outsideClickInterop.register", "arcade-ticket", _dotNetRef, "CloseReceipt");
        }
        else if (!PaymentComplete && _dotNetRef != null)
        {
            await JSRuntime.InvokeVoidAsync("outsideClickInterop.unregister");
            _dotNetRef.Dispose();
            _dotNetRef = null;
        }
    }

    private async Task HandleCheckout()
    {
        StatusMessage = "Processing payment...";

        var PaymentMethodId = await JSRuntime.InvokeAsync<string>("stripeInterop.createPaymentMethod", CustomerName, CustomerEmail);

        var result = await PaymentService.ProcessPayment(PaymentMethodId, Amount);

        if (!result.IsSuccess)
        {
            StatusMessage = $"Error: {result.ErrorMessage}";
            return;
        }

        if (result.RequiresAction && !string.IsNullOrWhiteSpace(result.ClientSecret))
        {
            StatusMessage = "Additional authentication required...";
            var confirmed = await PaymentService.ConfirmPayment(result.ClientSecret);

            StatusMessage = confirmed ? "Payment confirmed!" : "Payment confirmation failed.";
            PaymentComplete = confirmed;
            return;
        }

        PaymentComplete = true;
        StatusMessage = "Payment successful!";
    }

    [JSInvokable]
    public void CloseReceipt()
    {
        PaymentComplete = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}

<link rel="stylesheet" href="css/CheckoutStyle.css"/>