@page "/checkout"
@using Frontend.Models
@using Frontend.Services
@using Stripe
@inject IJSRuntime JSRuntime
@inject IPaymentService PaymentService
@inject IProductService ProductService
@inject ILocalCartStorageService CartStorageService

<h3>Checkout</h3>

<div class="form-group">
    <label>Name</label>
    <input class="form-control" @bind="CustomerName" />
</div>

<div class="form-group">
    <label>Email</label>
    <input class="form-control" @bind="CustomerEmail" />
</div>

<div id="card-element" class="form-control p-3 mb-3"></div>

<div id="card-errors" class="text-danger mb-2"></div>

<button class="btn btn-primary" @onclick="HandleCheckout">Pay</button>

@code {
    private string PaymentMethodId { get; set; } = string.Empty;
    private decimal Amount { get; set; }

    private Dictionary<string, int> CartItems = new();
    private string CustomerName = "";
    private string CustomerEmail = "";

    private string StatusMessage = "";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CartItems = CartStorageService.Cart;
            Amount = CartStorageService.GetCartCost(await ProductService.GetAllProductsAsync());
            await JSRuntime.InvokeVoidAsync("stripeInterop.initStripe", "pk_test_51RH08UGb53lseiZnINEQMqyRvewkBu0ilq4bUUB2FVlwHUxD4sPcBK7dir8yUtrh2Hxw5iZYZxXnUL4cNX4l7d6Y00jd0I1nhf");
        }
    }

    private async Task HandleCheckout()
    {
        StatusMessage = "Processing payment...";

        var PaymentMethodId = await JSRuntime.InvokeAsync<string>("stripeInterop.createPaymentMethod", CustomerName, CustomerEmail);

        var result = await PaymentService.ProcessPayment(PaymentMethodId, Amount);

        if (!result.IsSuccess)
        {
            StatusMessage = $"Error: {result.ErrorMessage}";
            return;
        }

        if (result.RequiresAction && !string.IsNullOrWhiteSpace(result.ClientSecret))
        {
            StatusMessage = "Additional authentication required...";
            var confirmed = await PaymentService.ConfirmPayment(result.ClientSecret);

            StatusMessage = confirmed ? "Payment confirmed!" : "Payment confirmation failed.";
            return;
        }

        StatusMessage = "Payment successful!";
    }
}