@page "/product-page-temp"
@using Frontend.DummyData
@using Frontend.Models
@using Frontend.Services
@using System.Text.Json
@inject IProductService product_service
@inject HttpClient http
@inject IJSRuntime js

<h3>Product Page</h3>
@if (selectedProduct is not null)
{
    <div class="product-page-container">
        <div class="product-main-content">
            <!-- Product Card -->
            <div class="product-card mb-5 p-4 text-light">
                <h2 class="product-title">@selectedProduct.Name</h2>
                <hr />
                <div class="product-content row gx-4">
                    <div class="col-lg-4 d-flex flex-column justify-content-between p-3">
                        <p>@selectedProduct.Description</p>
                        <div class="product-meta mt-4">
                            <span><strong>Genre:</strong> @selectedProduct.Genre</span>
                            <span><strong>Age Rating:</strong> @selectedProduct.AgeRating</span><br />
                            <span><strong>Status:</strong> @selectedProduct.Status</span>
                        </div>
                    </div>
                    <div class="col-lg-8 d-flex align-items-stretch p-3">
                        <img src="@selectedProduct.ImageLink" alt="@selectedProduct.Name" class="img-fluid rounded product-img w-100" />
                    </div>
                </div>
            </div>

            <!-- Reviews + Related Products -->
            <div class="product-info-card mb-5 p-4 text-light">
                <h5 class="mb-3">Reviews</h5>
                <div class="product-content row gx-4">
                    <div class="col-lg-3 gx-4 p-3">
                        <ReviewViewer Reviews="selectedProduct.Reviews" />
                    </div>

                    <div class="col-lg-9 p-3">
                        <h5 class="mb-3">Related Products</h5>
                        <ProductCarousel Products="products" AutoScrollInterval="4000" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <ProductSidebar Product="selectedProduct" />
    </div>
}

@code
{
    public string? ProductName { get; set; }
    private bool loadedImages;
    private List<Product>? products;
    private Product? selectedProduct;
    private const string ImageMapKey = "productImageMap";
    private const string FuncTrigger = "http://localhost:7202/api/GetImageFunction";
    private bool showAllReviews = false;

    protected override async Task OnInitializedAsync()
    {

        //loadedImages = true;
        products = await product_service.GetAllProductsAsync();
        if(products != null)
        {
            foreach (var product in products)
            {
                product.ImageLink = $"https://i0.wp.com/port2flavors.com/wp-content/uploads/2022/07/placeholder-614.png?fit=1200%2C800&ssl=1";
            }

            selectedProduct = products.FirstOrDefault();
        }
    }
    private async Task SetImageMapAsync(Dictionary<string, string> imageMap)
    {
        var json = JsonSerializer.Serialize(imageMap);
        await js.InvokeVoidAsync("myLocalStorage.setItem", ImageMapKey, json);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        loadedImages = false; // Reset loadedImages to false on each render
        if (!firstRender) return;
        var rawJson = await js.InvokeAsync<string>("myLocalStorage.getItem", ImageMapKey);
        Console.WriteLine(rawJson);
        await js.InvokeVoidAsync("console.log", "rawJson:", rawJson);
        Dictionary<string, string>? imageMap = null;
        if (!string.IsNullOrEmpty(rawJson))
        {
            imageMap = JsonSerializer.Deserialize<Dictionary<string, string>>(rawJson);
            await js.InvokeVoidAsync("console.log", " deserialized map:", imageMap);
        }

       
        if (imageMap == null)
        {
            imageMap = await http.GetFromJsonAsync<Dictionary<string, string>>(FuncTrigger);
            await SetImageMapAsync(imageMap);
            await js.InvokeVoidAsync("console.log", "fetched+stored map:", imageMap);
        }

        
        if (products != null)
        {
            foreach (var product in products)
            {
                var match = imageMap
                    .Where(p => p.Key.Equals(product.Name, StringComparison.OrdinalIgnoreCase))
                    .Select(p => p.Value)
                    .FirstOrDefault();
                Console.WriteLine(match);
                if (!string.IsNullOrEmpty(match))
                {
                    product.ImageLink = match.Trim().Trim('"');
                    Console.WriteLine($"Image link for {product.Name}: {product.ImageLink}");
                }

            }
        }

        
        loadedImages = true;
        await InvokeAsync(StateHasChanged);

    }

    private void ToggleReviews()
    {
        showAllReviews = !showAllReviews;
    }
}
<link rel="stylesheet" href="css/ProductPageStyle.css" />
