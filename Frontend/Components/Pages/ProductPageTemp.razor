@page "/product-page-temp"
@using Frontend.DummyData
@using Frontend.Models
@using Frontend.Services
@using System.Text.Json
@inject IProductService product_service
@inject HttpClient http
@inject IJSRuntime js
@inject ILocalLinkStorageService imageMapService

<h3>Product Page</h3>
@if (selectedProduct is not null)
{
    <div class="product-page-container">
        <div class="product-main-content">
            <!-- Product Card -->
            <div class="product-card mb-5 p-4 text-light">
                <h2 class="product-title">@selectedProduct.Name</h2>
                <hr />
                <div class="product-content row gx-4">
                    <div class="col-lg-4 d-flex flex-column justify-content-between p-3">
                        <p>@selectedProduct.Description</p>
                        <div class="product-meta mt-4">
                            <span><strong>Genre:</strong> @selectedProduct.Genre</span>
                            <span><strong>Age Rating:</strong> @selectedProduct.AgeRating</span><br />
                            <span><strong>Status:</strong> @selectedProduct.Status</span>
                        </div>
                    </div>
                    <div class="col-lg-8 d-flex align-items-stretch p-3">
                        <img src="@selectedProduct.ImageLink" alt="@selectedProduct.Name" class="img-fluid rounded product-img w-100" />
                    </div>
                </div>
            </div>

            <!-- Reviews + Related Products -->
            <div class="product-info-card mb-5 p-4 text-light">
                <h5 class="mb-3">Reviews</h5>
                <div class="product-content row gx-4">
                    <div class="col-lg-3 gx-4 p-3">
                        <ReviewViewer Reviews="selectedProduct.Reviews" />
                    </div>

                    <div class="col-lg-9 p-3">
                        <h5 class="mb-3">Related Products</h5>
                        <ProductCarousel Products="products" AutoScrollInterval="4000" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <ProductSidebar Product="selectedProduct" />
    </div>
}

@code
{
    public string? ProductName { get; set; }
    private bool loadedImages;
    private List<Product>? products;
    private Product? selectedProduct;
    private const string ImageMapKey = "productImageMap";
    private const string FuncTrigger = "https://frolunda-arcadefunc.azurewebsites.net/api/GetImageFunction";
    private bool showAllReviews = false;

    // protected override async Task OnInitializedAsync()
    // {

    //     loadedImages = true;
    //     products = await product_service.GetAllProductsAsync();
    //     if(products != null)
    //     {
    //         foreach (var product in products)
    //         {
    //             product.ImageLink = $"https:i0.wp.com/port2flavors.com/wp-content/uploads/2022/07/placeholder-614.png?fit=1200%2C800&ssl=1";
    //         }

    //         selectedProduct = products.FirstOrDefault();
    //     }
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (loadedImages)
    //         return;

    //     // Load the image map from local storage
    //     await imageMapService.LoadImageMapAsync();

    //     // If the image map is empty, fetch it from the Azure Function and save it
    //     if (imageMapService.ImageMap.Count == 0)
    //     {
    //         var fetchedImageMap = await http.GetFromJsonAsync<Dictionary<string, string>>(FuncTrigger);
    //         if (fetchedImageMap != null)
    //         {
    //             await imageMapService.SaveImageMapAsync(fetchedImageMap);
    //         }
    //     }

    //     // Update product image links using the image map
    //     if (products != null)
    //     {
    //         foreach (var product in products)
    //         {
    //             product.ImageLink = imageMapService.GetImageLink(product.Name)
    //                                 ?? "https://placeholder.url"; // Fallback to placeholder if no match
    //         }
    //     }

    //     // Mark images as loaded and trigger a re-render
    //     loadedImages = true;
    //     await InvokeAsync(StateHasChanged);
    // }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        
        if (firstRender)
        {
            products = await product_service.GetAllProductsAsync();
            if (products != null)
            {
                foreach (var product in products)
                {
                    product.ImageLink = $"https://i0.wp.com/port2flavors.com/wp-content/uploads/2022/07/placeholder-614.png?fit=1200%2C800&ssl=1";
                }

                selectedProduct = products.FirstOrDefault();
            }

            var rawJson = await js.InvokeAsync<string>("localStorage.getItem", ImageMapKey);
            Dictionary<string, string>? imageMap = null;

            if (!string.IsNullOrWhiteSpace(rawJson))
                imageMap = JsonSerializer.Deserialize<Dictionary<string, string>>(rawJson);   

            if(imageMap == null)
            {
                imageMap = await http.GetFromJsonAsync<Dictionary<string, string>>(FuncTrigger);
                await js.InvokeVoidAsync("localStorage.setItem", ImageMapKey,
                    JsonSerializer.Serialize(imageMap));
            }

            if (imageMap != null)
            {
                foreach (var product in products!)
                {
                    var matchKey = imageMap.Keys
                     .FirstOrDefault(k =>
                         string.Equals(k, product.Name, StringComparison.OrdinalIgnoreCase)
                     );

                    if (matchKey != null && imageMap.TryGetValue(matchKey, out var url))
                    {
                        product.ImageLink = url;
                    }
                    
                    
                    // var match = imageMap
                    // .Where(p => p.Key.Contains(product.Name, StringComparison.OrdinalIgnoreCase))
                    // .Select(p => p.Value)
                    // .FirstOrDefault();

                    // if(!string.IsNullOrEmpty(match))
                    //     product.ImageLink = match.Trim().Trim('"');

                }

                await InvokeAsync(StateHasChanged);
            }

        } 

    }

    private void ToggleReviews()
    {
        showAllReviews = !showAllReviews;
    }
}
<link rel="stylesheet" href="css/ProductPageStyle.css" />
