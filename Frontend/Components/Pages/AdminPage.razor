@page "/admin-page"
@using Frontend.Models
@using Frontend.DummyData
@using Frontend.Components.Controls

<h3>Admin Page</h3>

<!-- Filter/Search/Sort Component -->
<ProductSorter Products="products" OnFilteredChanged="OnFilteredChanged" />

<!-- Product Table Component -->
<ProductEditor Products="filteredProducts" 
              OnUpdate="UpdateProduct" 
              OnDelete="DeleteProduct" />

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();

    /*protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        ApplyFilterAndSort();
    }*/

    private async Task UpdateProduct(Product product)
    {
        /*
        var response = await Http.PutAsJsonAsync($"api/products/{product.Id}", product);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Updated product {product.Id}");
            }
        else
        {
            Console.WriteLine($"Failed to update product {product.Id}");
            }
        */
    }

    private async Task DeleteProduct(string productId)
    {
        /*
        var response = await Http.DeleteAsync($"api/products/{productId}");
        if (response.IsSuccessStatusCode)
        {
            products = products.Where(p => p.Id != productId).ToList();
            Console.WriteLine($"Deleted product {productId}");
            }
        else
        {
            Console.WriteLine($"Failed to delete product {productId}");
            }
        */
    }

    protected override void OnInitialized()
    {
        products = CreateProductDummyData.GetDummyProducts();
        filteredProducts = products;
    }

    private void OnFilteredChanged(List<Product> filtered)
    {
        filteredProducts = filtered;
    }
}