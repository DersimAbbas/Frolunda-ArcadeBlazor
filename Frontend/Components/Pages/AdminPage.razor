@page "/admin-page"
@using Frontend.Models
@using Frontend.DummyData
@using Frontend.Components.Controls
@using Frontend.Services
@inject HttpClient http
@inject IProductService product_Service

<h3 class="welcome-text">Admin Page</h3>

<div class="d-flex justify-content-center mb-5">
    <button class="btn me-2 @(IsViewingProducts ? "btn-primary" : "btn-outline-primary")"
    @onclick="() => IsViewingProducts = true">
        View Products
    </button>

    <button class="btn @(IsViewingUsers ? "btn-outline-primary" : "btn-primary")"
    @onclick="() => IsViewingUsers = true">
        View Users
    </button>
</div>

@if(IsViewingProducts)
{
    <ProductSorter Products="products" OnFilteredChanged="OnFilteredChanged" />

    <ProductEditor Products="filteredProducts" 
    OnAddProduct="HandleAddProduct"/>
}
else if(IsViewingUsers)
{
    <UserEditor />
}

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private List<User> users = new();

    private bool _isViewingProducts = true;
    public bool IsViewingProducts
    {
        get => _isViewingProducts;
        set
        {
            _isViewingProducts = value;
            if(_isViewingProducts)
            {
                IsViewingUsers = false;
            }
            StateHasChanged();
        }
    }

    private bool _isViewingUsers = false;
    public bool IsViewingUsers
    {
        get => _isViewingUsers;
        set
        {
            _isViewingUsers = value;
            if (_isViewingUsers)
            {
                IsViewingProducts = false;
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        products = await product_Service.GetAllProductsAsync();
        StateHasChanged();
        //ApplyFilterAndSort();
    }

    // protected override void OnInitialized()
    // {
    //     products = CreateAdminPageDummyData.GetDummyProducts();
    //     filteredProducts = products;
    // }

    private async Task HandleAddProduct(Product newProduct)
    {
        products = await product_Service.GetAllProductsAsync(); // Refresh the full product list
        filteredProducts = products; // Update the filtered list
        StateHasChanged(); // Trigger UI refresh
    }
    



    private void OnFilteredChanged(List<Product> filtered)
    {
        filteredProducts = filtered;
    }
}