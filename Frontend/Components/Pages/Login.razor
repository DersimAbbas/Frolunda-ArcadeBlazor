@page "/login"
@inject IFirebaseAuthService FirebaseAuthService
@inject NavigationManager Navigation
@inject ICookiesTokenService CookiesTokenService
@using Frontend.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS


<h3 class="text-center mb-4" style="font-family: 'Futura', sans-serif; color: #EDEDED;">Login</h3>

<EditForm Model="@UserDto" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container text-light my-5">
        <div class="row justify-content-center gap-5">
            <div class="col-md-5" style="background-color: #444444; padding: 2rem; border: 1px solid #5e5e5e; border-radius: 2%;">

                <div class="form-group mb-3">
                    <label class="form-label">Email</label>
                    <InputText @bind-Value="UserDto.Email" class="form-control bg-dark text-light border-secondary" type="email" />
                    <ValidationMessage For="@(() => UserDto.Email)" />
                </div>

                <div class="form-group mb-4">
                    <label class="form-label">Password</label>
                    <InputText @bind-Value="UserDto.Password" class="form-control bg-dark text-light border-secondary" type="password" />
                    <ValidationMessage For="@(() => UserDto.Password)" />
                </div>

                <div class="form-group text-center">
                    <button type="submit" class="btn btn-secondary px-4" style="background-color: #DA0037; border-color: #DA0037;">
                        Login
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="text-danger text-center mt-3">@ErrorMessage</div>
                }
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginUserDto UserDto { get; set; } = new()
    {
        Email = null,
        Password = null
    };
    private string ErrorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var token = await FirebaseAuthService.LoginUser(UserDto.Email, UserDto.Password);
            
            if (!string.IsNullOrEmpty(token))
            {
                var response = await FirebaseAuthService.VerifyTokenAsync(token);

                if (response)
                {
                    // await CookiesTokenService.SetTokenAsync(token);
                    await JS.InvokeVoidAsync("setAuthToken", token);

                    Navigation.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    ErrorMessage = "Failed to assign role or verify token. Please try again.";
                }
            }
            else
            {
                ErrorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
    }
}
