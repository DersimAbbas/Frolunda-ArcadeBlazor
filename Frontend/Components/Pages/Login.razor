@page "/login"
@using System.Web
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IAntiforgery AntiForgery
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject IFirebaseAuthService FirebaseAuthService

<h3 class="text-center mb-4 login-text" >Login</h3>

<div class="container text-light my-5">
    <div class="row justify-content-center gap-5">
        <div class="col-md-5" style="background-color: #444444; padding: 2rem; border: 1px solid #5e5e5e; border-radius: 2%;">

            @* <form method="post" action="/frontend/auth/login"> *@
            @*     <input name="__RequestVerificationToken" type="hidden" value="@RequestToken" /> *@

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                <div class="text-danger text-center mb-3">
                    @ErrorMessage
                </div>
                }

                <div class="form-group mb-3">
                    <label for="email" class="form-label generic-text generic-text-size">Email</label>
                    <input type="email" id="email" name="Email"
                           class="form-control bg-dark text-light border-secondary"
                           value="@LoginUser.Email"
                           @onchange="@(e => LoginUser.Email = e.Value?.ToString() ?? string.Empty)"
                           required />
                </div>

                <div class="form-group mb-4">
                    <label for="password" class="form-label generic-text generic-text-size">Password</label>
                    <input type="password" id="password" name="Password"
                           class="form-control bg-dark text-light border-secondary"
                           value="@LoginUser.Password"
                           @onchange="@(e => LoginUser.Password = e.Value?.ToString() ?? string.Empty)"
                           required />
                </div>

                <div class="form-group text-center">
                    <button type="submit" class="btn btn-secondary px-4 generic-text generic-text-size"
                            style="background-color: #bf1f1f; border-color: #DA0037;" @onclick="HandleLogin">
                        Login
                    </button>
                </div>

                <div class="mt-3 text-center ">
                    <p>Don't have an account? <a href="/register" class="text-info generic-text-size generic-text">Register here</a></p>
                </div>
            @* </form> *@
    
        </div>
    </div>
</div>

@code {

    private LoginUserDto LoginUser { get; set; } = new()
    {
        Email = null,
        Password = null
    };
    
    private string ErrorMessage { get; set; }
    private string RequestToken { get; set; }
    
    // protected override void OnInitialized()
    // {
    //     if (HttpContextAccessor.HttpContext != null)
    //     {
    //         var tokens = AntiForgery.GetAndStoreTokens(HttpContextAccessor.HttpContext);
    //         RequestToken = tokens.RequestToken;
    //     }
    //
    // }
    //
    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    //         if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("error", out var errorValue))
    //         {
    //             ErrorMessage = HttpUtility.UrlDecode(errorValue);
    //             StateHasChanged(); 
    //         }
    //     }
    // }

    private async Task HandleLogin()
    {
        // var response = await Http.PostAsJsonAsync($"{Navigation.BaseUri}api/auth/login", loginModel);
        await FirebaseAuthService.LoginUser(LoginUser.Email, LoginUser.Password);
  
    }
    private string ExtractTokenValue(string cookie)
    {
        if (cookie != null)
        {
            var tokenValue = cookie.Split('=')[1];
            return tokenValue.Trim();
        }

        return null;
    }

   
}
