@using Blazored.LocalStorage
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject IFirebaseAuthService FirebaseAuthService
@inject ILocalCartStorageService CartStorage
@inject ICartService CartService
@inject IJSRuntime JsRuntime
@inject FirebaseAuthClient FirebaseAuthClient
@inject ConfirmDialogService ConfirmDialogService

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" id="nav-home" href="/" Match="NavLinkMatch.All">
                <span class="bi bi-house" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <AuthorizeView>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" id="nav-login" href="/login" Match="NavLinkMatch.All">

                        <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" id="nav-profile" href="/profile-page" Match="NavLinkMatch.All">
                        <span class="bi bi-person" aria-hidden="true"></span> Profile Page
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="admin">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" id="nav-admin" href="/admin-page" Match="NavLinkMatch.All">
                        <span class="bi bi-lock" aria-hidden="true" ></span> Admin Page
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

        <div class="nav-item px-3">
            <NavLink class="nav-link" id="nav-forum" href="/forum" Match="NavLinkMatch.All">
                <span class="bi bi-people" aria-hidden="true"></span> Forum
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" id="nav-events" href="/events" Match="NavLinkMatch.All">
                <span class="bi bi-calendar-event" aria-hidden="true"></span> Events
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" id="nav-contact" href="/contact" Match="NavLinkMatch.All">
                <span class="bi bi-pin-map-fill" aria-hidden="true"></span> Contact
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" id="nav-logout" @onclick="OnSignOutClicked" Match="NavLinkMatch.All">
                        <span class="bi bi-door-open" aria-hidden="true"></span> Logout
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

    </nav>
</div>

<style>
    .nav-link span {
    font-size: 1.2rem;
    line-height: 1;
    }
</style>

@code {
    private ConfirmDialog confirmed = default!;
    private Cart Cart { get; set; } = new();
    private async Task OnSignOutClicked()
    {
        try
        {
            var userId = await FirebaseAuthService.GetUserId();
            await CartStorage.LoadCartAsync();
            Cart.cartItems = CartStorage.Cart;

            if (Cart.cartItems.Count == 0)
            {
                await CartStorage.ClearCartAsync();

                await CartService.DeleteCartByUserId(userId);

                await FirebaseAuthService.Logout();
                return;
            }
            bool saveCart = await ConfirmDialogService.ConfirmDialogInstance!.ShowAsync(
                "Leaving So Soon?",
                "Do you want to save your shopping cart for your next session?"
           );
            if (saveCart && Cart.cartItems.Count > 0)
            {
                if (userId == null) { return; }
                Cart.UserId = userId;
                await CartService.AddCart(Cart);
            }
            else
            {
                await CartService.DeleteCartByUserId(userId);
            }
            await CartStorage.ClearCartAsync();
            await FirebaseAuthService.Logout();
        }
        catch(Exception ex)
        {
            await CartStorage.ClearCartAsync();
            await FirebaseAuthService.Logout();
            Console.WriteLine(ex.Message);
        }
    }
}



                
            
            
            
            

       