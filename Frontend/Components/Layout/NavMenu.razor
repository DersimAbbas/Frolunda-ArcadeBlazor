@using Blazored.LocalStorage
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject IFirebaseAuthService FirebaseAuthService
@inject ILocalCartStorageService CartStorage
@inject ICartService CartService
@inject IJSRuntime JsRuntime
@inject FirebaseAuthClient FirebaseAuthClient
@inject ConfirmDialogService ConfirmDialogService

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid py-2 px-3" style="max-height:200px;">

        <!-- ◀ Brand: logo + title -->
        <a class="navbar-brand d-flex align-items-center" href="/">
            <img src="images/logo.png"
                 alt="Logo"
                 style="max-height:80px"
                 class="d-inline-block align-text-top ms-3" />
            <span class="header-title text-nowrap ps-5">Frölunda Arcade</span>
        </a>

        <!-- ☰ mobile toggler -->
        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse"
                data-bs-target="#mainNav"
                aria-controls="mainNav"
                aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- ● collapsible nav (centered & evenly spaced) -->
        <div class="collapse navbar-collapse justify-content-center" id="mainNav">
            <div class="navbar-nav d-flex align-items-center justify-content-evenly w-75">
                <div class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                        <span class="bi bi-house" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                <AuthorizeView>
                    <NotAuthorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                            </NavLink>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>

                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/profile-page" Match="NavLinkMatch.All">
                                <span class="bi bi-person" aria-hidden="true"></span> Profile Page
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="admin">
                    <Authorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/admin-page" Match="NavLinkMatch.All">
                                <span class="bi bi-lock" aria-hidden="true"></span> Admin Page
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <div class="nav-item">
                    <NavLink class="nav-link" href="/store-front" Match="NavLinkMatch.All">
                        <span class="bi bi-controller" aria-hidden="true"></span> Products
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link" href="/forum" Match="NavLinkMatch.All">
                        <span class="bi bi-people" aria-hidden="true"></span> Forum
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link" href="/events" Match="NavLinkMatch.All">
                        <span class="bi bi-calendar-event" aria-hidden="true"></span> Events
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link" href="/contact" Match="NavLinkMatch.All">
                        <span class="bi bi-pin-map-fill" aria-hidden="true"></span> Contact
                    </NavLink>
                </div>

                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item">
                            <NavLink class="nav-link"
                                     href="#"
                                     @onclick="OnSignOutClicked"
                                     Match="NavLinkMatch.All">
                                <span class="bi bi-door-open" aria-hidden="true"></span> Logout
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

       
        <div class="cart-button-wrapper align-items-center position-relative pe-3">
            <button id="cartToggleButton"
                    class="arcade-cart-btn"
                    @onclick="ToggleCart"
                    aria-label="Shopping Cart">
                <i class="bi bi-cart-fill"></i>
                
                @if (_cartItemCount > 0)
                {
                    <span class="arcade-cart-badge">@_cartItemCount</span>
                }
            </button>
            <ShoppingCart Visible="_isCartOpen" OnClose="ToggleCart" />
        </div>
    </div>
</nav>
<link rel="stylesheet" href="css/HeaderStyle.css" />

@code {
    private ConfirmDialog confirmed = default!;
    private Cart Cart { get; set; } = new();
    private bool _isCartOpen = false;
    private int _cartItemCount;

    protected override void OnInitialized()
    {
        CartStorage.OnChange += UpdateCartCount;
        UpdateCartCount();
    }

    private void UpdateCartCount()
    {
        _cartItemCount = CartStorage.GetCartItemCount();
        StateHasChanged();
    }

    public void Dispose()
    {
        CartStorage.OnChange -= UpdateCartCount;
    }

    private void ToggleCart()
    {
        _isCartOpen = !_isCartOpen;
    }
    private async Task OnSignOutClicked()
    {
        try
        {
            var userId = await FirebaseAuthService.GetUserId();
            await CartStorage.LoadCartAsync();
            Cart.cartItems = CartStorage.Cart;

            if (Cart.cartItems.Count == 0)
            {
                await CartStorage.ClearCartAsync();

                await CartService.DeleteCartByUserId(userId);

                await FirebaseAuthService.Logout();
                return;
            }
            bool saveCart = await ConfirmDialogService.ConfirmDialogInstance!.ShowAsync(
                "Leaving So Soon?",
                "Do you want to save your shopping cart for your next session?"
           );
            if (saveCart && Cart.cartItems.Count > 0)
            {
                if (userId == null) { return; }
                Cart.UserId = userId;
                await CartService.AddCart(Cart);
            }
            else
            {
                await CartService.DeleteCartByUserId(userId);
            }
            await CartStorage.ClearCartAsync();
            await FirebaseAuthService.Logout();
        }
        catch(Exception ex)
        {
            await CartStorage.ClearCartAsync();
            await FirebaseAuthService.Logout();
            Console.WriteLine(ex.Message);
        }
    }
}