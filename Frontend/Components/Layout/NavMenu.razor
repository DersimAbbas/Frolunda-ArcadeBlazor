@using Blazored.LocalStorage
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject IFirebaseAuthService FirebaseAuthService
@inject ILocalCartStorageService CartStorage
@inject ICartService CartService
@inject IJSRuntime JsRuntime
@inject FirebaseAuthClient FirebaseAuthClient
@inject ConfirmDialogService ConfirmDialogService

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container py-2 px-3">

        <a class="navbar-brand d-flex align-items-center" href="/">
            <img src="images/logo.png" alt="Logo" style="max-height:80px" class="ms-3" />
            <span class="header-title text-nowrap ps-5">Frölunda Arcade</span>
        </a>

        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse"
                data-bs-target="#mainNav"
                aria-controls="mainNav"
                aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="mainNav">
            <ul class="navbar-nav ms-auto text-center text-lg-start w-100 justify-content-evenly">

                <AuthorizeView>
                    <NotAuthorized>
                        <li class="nav-item" id="login-btn">
                            <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All" >
                                <i class="bi bi-box-arrow-in-right"></i> Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                    <Authorized>
                        <li class="nav-item" id="profile-btn">
                            <NavLink class="nav-link" href="/profile-page" Match="NavLinkMatch.All">
                                <i class="bi bi-person"></i> Profile
                            </NavLink>
                        </li>
                        <li class="nav-item" id="logout-btn">
                            <NavLink class="nav-link" href="#" @onclick="OnSignOutClicked">
                                <i class="bi bi-door-open"></i> Logout
                            </NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="admin">
                    <Authorized>
                        <li class="nav-item" id="admin-btn">
                            <NavLink class="nav-link" href="/admin-page" Match="NavLinkMatch.All">
                                <i class="bi bi-lock"></i> Admin
                            </NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>

                <li class="nav-item" id="products-btn">
                    <NavLink class="nav-link" href="/store-front" Match="NavLinkMatch.Prefix">
                        <i class="bi bi-controller"></i> Products
                    </NavLink>
                </li>
                <li class="nav-item" id="forum-btn">
                    <NavLink class="nav-link" href="/forum" Match="NavLinkMatch.Prefix">
                        <i class="bi bi-people"></i> Forum
                    </NavLink>
                </li>
                <li class="nav-item" id="events-btn">
                    <NavLink class="nav-link" href="/events" Match="NavLinkMatch.All">
                        <i class="bi bi-calendar-event"></i> Events
                    </NavLink>
                </li>
                <li class="nav-item" id="contact-btn">
                    <NavLink class="nav-link" href="/contact" Match="NavLinkMatch.All">
                        <i class="bi bi-pin-map-fill"></i> Contact
                    </NavLink>
                </li>

            </ul>
        </div>

        <div class="cart-button-wrapper position-relative pe-3 d-flex align-items-center">
            <button id="cartToggleButton"
                    class="arcade-cart-btn"
                    @onclick="ToggleCart"
                    aria-label="Shopping Cart">
                <i class="bi bi-cart-fill"></i>
                @if (_cartItemCount > 0)
                {
                <span class="arcade-cart-badge">@_cartItemCount</span>
                }
            </button>
            <ShoppingCart Visible="_isCartOpen" OnClose="ToggleCart" />
        </div>
    </div>
</nav>
@* <link rel="stylesheet" href="css/HeaderStyle.css" /> *@

@code {
    private ConfirmDialog confirmed = default!;
    private Cart Cart { get; set; } = new();
    private bool _isCartOpen = false;
    private int _cartItemCount;

    protected override void OnInitialized()
    {
        CartStorage.OnChange += UpdateCartCount;
        UpdateCartCount();
    }

    private void UpdateCartCount()
    {
        _cartItemCount = CartStorage.GetCartItemCount();
        StateHasChanged();
    }

    public void Dispose()
    {
        CartStorage.OnChange -= UpdateCartCount;
    }

    private void ToggleCart()
    {
        _isCartOpen = !_isCartOpen;
    }
    private async Task OnSignOutClicked()
    {
        try
        {
            var userId = await FirebaseAuthService.GetUserId();
            await CartStorage.LoadCartAsync();
            Cart.cartItems = CartStorage.Cart;

            if (Cart.cartItems.Count == 0)
            {
                await CartStorage.ClearCartAsync();

                await CartService.DeleteCartByUserId(userId);

                await FirebaseAuthService.Logout();
                return;
            }
            bool saveCart = await ConfirmDialogService.ConfirmDialogInstance!.ShowAsync(
                "Leaving So Soon?",
                "Do you want to save your shopping cart for your next session?"
           );
            if (saveCart && Cart.cartItems.Count > 0)
            {
                if (userId == null) { return; }
                Cart.UserId = userId;
                await CartService.AddCart(Cart);
            }
            else
            {
                await CartService.DeleteCartByUserId(userId);
            }
            await CartStorage.ClearCartAsync();
            await FirebaseAuthService.Logout();
        }
        catch(Exception ex)
        {
            await CartStorage.ClearCartAsync();
            await FirebaseAuthService.Logout();
            Console.WriteLine(ex.Message);
        }
    }
}