@page "/profile-page"
@using System.Globalization
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Frontend.Services.Interfaces
@using User = Frontend.Models.User
@inject IFirebaseAuthService FirebaseAuthService
@inject IJSRuntime JsRuntime
@inject FirebaseAuthClient FirebaseAuthClient
@inject IUserService UserService
@inject IOrderService OrderService


<h2 class="text-center welcome-text mb-5">Your Profile</h2>

<div class="d-flex flex-column flex-md-row justify-content-center gap-5 m-5">
    <div class="col-12 col-md-6">
        <div class="generic-text mb-3">
            Your account information
        </div>
        <div class="p-4" style="background-color: #444444; border: 1px solid #5e5e5e; border-radius: 2%;">
    
            <EditForm Model="@UserProfile" OnValidSubmit="UpdateProfile">
                <DataAnnotationsValidator />
                <ValidationSummary />
    
                <div class="form-group mb-3">
                    <label class="form-label generic-text generic-text-size">Username</label>
                    <InputText class="form-control bg-dark text-light border-secondary" @bind-Value="UserProfile.FirstName" />
                </div>
    
                <div class="form-group mb-3">
                    <label class="form-label generic-text generic-text-size">Email</label>
                    <InputText type="email" class="form-control bg-dark text-light border-secondary" @bind-Value="UserProfile.Email" />
                </div>
    
                <div class="form-group mb-3">
                    <label class="form-label generic-text generic-text-size">Address</label>
                    <InputText class="form-control bg-dark text-light border-secondary" @bind-Value="UserProfile.Address" />
                </div>
    
                <div class="form-group text-center">
                    <button class="btn btn-secondary px-4 generic-text-size generic-text" style="background-color: #bf1f1f; border-color: #DA0037;">
                        Update Profile
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="col-12 col-md-6" style="font-family: 'Futura', sans-serif;">
        <div class="generic-text mb-3" style="color: #EDEDED;">Your Order History</div>

        @if (UserOrderHistory?.Any() == true)
        {
        <div class="d-flex flex-column gap-4">
            @foreach (var order in UserOrderHistory)
            {
            <div style="background-color: #444444; color: #EDEDED; border: 1px solid #5e5e5e; border-radius: 2%; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);" class="p-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="fw-bold fs-5" style="color: #EDEDED;">
                        Order <span style="color: #bf1f1f;">#@order.Id</span>
                    </div>
                    <span class="small text-muted">@order.OrderDate.ToString("yyyy-MM-dd")</span>
                </div>

                <div class="d-flex flex-column gap-2">
                    @foreach (var product in order.Products)
                    {
                    <div style="background-color: rgba(68, 68, 68, 0.1); color: #EDEDED; border: 1px solid #5e5e5e; border-radius: 2%;" class="d-flex justify-content-between align-items-center p-3">
                        <div>
                            <div class="fw-semibold fs-6">@product.Name</div>
                            <div class="text-muted small">@product.Genre</div>
                        </div>
                        <div class="fw-bold" style="color: #bf1f1f;">@product.Price.ToString("C", CultureInfo.CurrentCulture)</div>
                    </div>
                    }
                </div>
            </div>
            }
        </div>
        }
        else
        {
        <div class="text-center mt-4" style="color: #EDEDED;">You haven't placed any orders yet.</div>
        }
    </div>
</div>

@code {

    private User? UserProfile { get; set; } = new();
    private List<Order>? UserOrderHistory { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var token = await JsRuntime.InvokeAsync<string>("getCookie", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var tokenVerified = await FirebaseAuthService.VerifyTokenAsync(token);

            if (tokenVerified && FirebaseAuthClient.User is not null)
            {
                var firebaseAuthUserId = FirebaseAuthClient.User.Uid;
                UserProfile = await UserService.GetUserByIdAsync(firebaseAuthUserId);

                UserOrderHistory = await OrderService.GetOrdersByUserIdAsync(firebaseAuthUserId); 
                
                StateHasChanged();
            } 
        }
    }



    private async Task UpdateProfile()
    {
        var response = await UserService.UpdateUser(UserProfile.Id, UserProfile);
        if (response)
        {
            //Blev klart
        }
        else
        {
            
        }
    }


}
