@using Frontend.Models

<div id="arcade-ticket-wrapper" class="arcade-ticket-wrapper">
<div id="arcade-ticket" class="arcade-ticket text-center mx-auto @_animationClass">
    <h2 class="arcade-title">FRÖLUNDA<br />ARCADE</h2>
    <div class="subheading">OFFICIAL PRIZE TICKET</div>

    <div class="ticket-details mt-3">
        <div>TICKET #@TicketNumber</div>
        <div>@DateTime</div>
    </div>

    @foreach (var item in Cart)
    {
        var product = Products.FirstOrDefault(p => p.Id == item.Key);
        if (product != null)
        {
            <div class="item-line mt-2">
                <span>@product.Name x @item.Value</span>
                <span class="float-end">@((product.Price * item.Value).ToString("0.00")) SEK</span>
            </div>
        }
    }

    <div class="total-section mt-5">
        <strong>TOTAL</strong>
        <span class="float-end"><strong>@Amount.ToString("0.00") SEK</strong></span>
    </div>

    <div class="mt-3 arcade-message">
        INSERT COIN TO PLAY AGAIN!
    </div>

    <div class="barcode mt-4 mb-2">ABCDE12345</div>
    <div class="small-text">KEEP THIS TICKET<br />REDEEM AT PRIZE COUNTER</div>

    <button class="btn redeem-btn mt-3" @onclick="HandleClose">REDEEM LATER</button>
</div>
</div>

@code {
    [Parameter] public string TicketNumber { get; set; }
    [Parameter] public string DateTime { get; set; }
    [Parameter] public Dictionary<string, int> Cart { get; set; } = new();
    [Parameter] public List<Product> Products { get; set; } = new();
    [Parameter] public decimal Amount { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string _animationClass = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        
        _animationClass = "animate-in";
        StateHasChanged();
    }

    private async Task HandleClose() => await OnClose.InvokeAsync();
}

<link rel="stylesheet" href="css/ReceiptStyle.css" />