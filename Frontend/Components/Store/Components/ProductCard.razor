@using Frontend.Models
@using MudBlazor
@inject NavigationManager NavigationManager

<div class="card arcade-post-card text-light border-2 border-dark h-100" id="@SelectedProduct.Id">
    <!-- Header with rating -->
   
    <!-- Image at top -->
    <img src="@SelectedProduct.ImageLink"
         alt="@SelectedProduct.Name"
         class="card-img bg-transparent object-fit-fill" style="max-height:300px;" />

    <!-- Body with name & description -->
    <div class="card-body d-flex flex-column">
        <h4 class="card-title fw-bold mb-2">@SelectedProduct.Name</h4>
        <MudRating SelectedValue="@GetAvgRating()" ReadOnly="true" />
        <p class="card-text text-muted mb-4 flex-grow-1">
           
        </p>
    </div>
    <!-- Footer with price + button -->
    <div class="card-footer border-0 bg-transparent d-flex justify-content-between align-items-center">
        <span class="fw-semibold fs-6" style="color:antiquewhite">@SelectedProduct.Price kr</span>
        <button class="btn simple-arcade-btn"
                @onclick="() => NavigateToProductPage()">
            View Product
        </button>
    </div>
</div>
@code {
    [Parameter] public Product SelectedProduct { get; set; }


    private void NavigateToProductPage()
    {
        Console.WriteLine($"Navigating to product page for {SelectedProduct.Name}");
        NavigationManager.NavigateTo($"/product-page/{SelectedProduct.Name}");
    }

    private int GetAvgRating()
    {
        var avgRating = 0.0;
        var reviewCount = SelectedProduct.Reviews.Count != 0 ? SelectedProduct.Reviews.Count : 1; 
        foreach (var review in SelectedProduct.Reviews)
        {
            avgRating += review.Ratings;
        }

        return (int)Math.Round(avgRating / reviewCount);
    }
}