@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services.Interfaces
@inject IUserService UserService
@inject IOrderService OrderService
@inject IFirebaseAuthService FirebaseAuthService
@inject IJSRuntime JsRuntime
@inject FirebaseAuthClient FirebaseAuthClient

<ProductCarousel Products="_recommendedProducts" />
@code {
    [Parameter] public List<Product> Products { get; set; }
    private List<Product> _recommendedProducts = new();
    private List<Order> _userOrders = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) { return; }

        var token = await JsRuntime.InvokeAsync<string>("getCookie", "token");

        if (!string.IsNullOrEmpty(token)) { return; }
        var tokenVerified = await FirebaseAuthService.VerifyTokenAsync(token);

        if (!tokenVerified || FirebaseAuthClient.User is null) { return; }
                var firebaseAuthUserId = FirebaseAuthClient.User.Uid;

         _userOrders = await OrderService.GetOrdersByUserIdAsync(firebaseAuthUserId);

        if (_userOrders is null || _userOrders.Count < 1) { return; }

         var lastOrder = _userOrders
             .OrderByDescending(o => o.OrderDate)
             .FirstOrDefault();

         if (lastOrder != null)
         {
             var genre = lastOrder.Products.FirstOrDefault().Genre;
             _recommendedProducts = Products.Where(p => p.Genre == genre).ToList();
         }

         StateHasChanged();
    }
}
