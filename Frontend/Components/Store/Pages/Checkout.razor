@page "/checkout"
@using Firebase.Auth
@using Frontend.Services
@using Frontend.Components.Store.Components
@using Frontend.Services.Interfaces
@inject IJSRuntime JsRuntime
@inject IPaymentService PaymentService
@inject IProductService ProductService
@inject ILocalCartStorageService CartStorageService
@inject IFirebaseAuthService FirebaseAuthService
@inject ILocalCartStorageService LocalCartService
@inject FirebaseAuthClient FirebaseAuthClient
<h3 class="arcade-title">Checkout</h3>

<div class="arcade-form form-group d-flex flex-column gap-3 text-light">
    <label>Name</label>
    <input id="Name-text" class="form-control arcade-input" @bind="_customerName" />

    <label>Email</label>
    <input id="email-text" class="form-control arcade-input" @bind="_customerEmail" />

    <label>Card Number</label>
    <div id="card-number-element" class="form-control arcade-input p-3"></div>

    <label>Expiry Date</label>
    <div id="card-expiry-element" class="form-control arcade-input p-3"></div>

    <label>CVC</label>
    <div id="card-cvc-element" class="form-control arcade-input p-3"></div>

    <label>Postal Code</label>
    <div id="card-postal-element" class="form-control arcade-input p-3"></div>
</div>

<div id="card-errors" class="text-danger mb-2 arcade-error"></div>

<button class="btn arcade-btn mt-3" @onclick="HandleCheckout">Pay</button>

@if (_paymentComplete)
{
    <div id="receipt-overlay" class="receipt-overlay">
        <ReceiptPopup TicketNumber="R2-9R-S2"
        DateTime="@DateTime.Now.ToString("yyyy-MM-dd, HH:mm:ss")"
        Cart="@CartStorageService.Cart"
        Products="@AllProducts"
        Amount="@_amount"
        OnClose="@(() => _paymentComplete = false)" />
    </div>
}
<LoadingOverlay IsLoading="_isLoading" LoadingText="Processing payment..." />

@code {
    private string _paymentMethodId { get; set; } = string.Empty;
    private decimal _amount { get; set; }

    private List<Models.Product> AllProducts { get; set; } = new();
    private Dictionary<string, int> CartItems { get; set; } = new();

    private string _customerName = "";
    private string _customerEmail = "";

    private string _statusMessage = "";

    private bool _paymentComplete = false;
    private DotNetObjectReference<Checkout>? _dotNetRef;
    private string _userId = string.Empty;

    private bool _isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) { return; }
        var token = await JsRuntime.InvokeAsync<string>("getCookie", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var tokenVerified = await FirebaseAuthService.VerifyTokenAsync(token);

            if (tokenVerified && FirebaseAuthClient.User.Uid is not null)
            {
                var firebaseAuthUserId = FirebaseAuthClient.User.Uid;
                _userId = firebaseAuthUserId;

            }
        }

        CartItems = CartStorageService.Cart;
        AllProducts = await ProductService.GetAllProductsAsync();
        _amount = CartStorageService.GetCartCost(AllProducts);

        await JsRuntime.InvokeVoidAsync("stripeInterop.initStripe", "pk_test_51RH08UGb53lseiZnINEQMqyRvewkBu0ilq4bUUB2FVlwHUxD4sPcBK7dir8yUtrh2Hxw5iZYZxXnUL4cNX4l7d6Y00jd0I1nhf");
        if (_paymentComplete && _dotNetRef == null)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("outsideClickInterop.register", "arcade-ticket", _dotNetRef, "CloseReceipt");
        }
        else if (!_paymentComplete && _dotNetRef != null)
        {
            await JsRuntime.InvokeVoidAsync("outsideClickInterop.unregister");
            _dotNetRef.Dispose();
            _dotNetRef = null;
        }
    }

    private async Task HandleCheckout()
    {
        _statusMessage = "Processing payment...";
        _isLoading = true;

        var PaymentMethodId = await JsRuntime.InvokeAsync<string>("stripeInterop.createPaymentMethod", _customerName, _customerEmail);

        var result = await PaymentService.ProcessPayment(PaymentMethodId, _amount, _userId, CartItems);

        if (!result.IsSuccess)
        {
            _statusMessage = $"Error: {result.ErrorMessage}";
            _isLoading = false;
            return;
        }

        if (result.RequiresAction && !string.IsNullOrWhiteSpace(result.ClientSecret))
        {
            _statusMessage = "Additional authentication required...";
            var confirmed = await PaymentService.ConfirmPayment(result.ClientSecret);

            _statusMessage = confirmed ? "Payment confirmed!" : "Payment confirmation failed.";
            _paymentComplete = confirmed;
            _isLoading = false;

            if (confirmed)
            {
                await LocalCartService.ClearCartAsync();
            }
            return;
        }

        _paymentComplete = true;
        await PaymentService.RegisterOrderAfterPayment(_userId,CartItems);
        
        _statusMessage = "Payment successful!";
        _isLoading = false;
        await LocalCartService.ClearCartAsync();
    }

    [JSInvokable]
    public void CloseReceipt()
    {
        _paymentComplete = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}

<link rel="stylesheet" href="css/CheckoutStyle.css"/>