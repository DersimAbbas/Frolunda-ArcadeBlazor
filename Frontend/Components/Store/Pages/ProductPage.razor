@page "/product-page/{ProductName}"
@using Frontend.Components.User.Components
@using Frontend.Models
@using Frontend.Services
@using System.Text.Json
@using Frontend.Services.Interfaces
@using Frontend.Components.Store
@using Frontend.Components.Store.Components

@inject IProductService ProductService
@inject HttpClient http
@inject IJSRuntime JsRuntime
@layout ProductPageLayout

@if (_selectedProduct != null)
{
    <div class="container py-5">

        <div class="card bg-transparent border border-secondary text-light mb-4">
            <div class="row g-0">

                <div class="col-md-6">
                    <img 
                    src="@_selectedProduct.ImageLink"
                    alt="@_selectedProduct.Name"
                    class="img-fluid h-100 w-100 object-cover rounded-start">
                </div>
               
                <div class="col-md-6 d-flex flex-column justify-content-center p-4">
                    <h2 class="mb-3">@_selectedProduct.Name <MudRating SelectedValue="@GetAvgRating()" ReadOnly="true" Class="justify-content-sm-center" /></h2>
                    <ul class="list-unstyled small mb-4">
                        <li><strong>Genre:</strong> @_selectedProduct.Genre</li>
                        <li><strong>Age Rating:</strong> @_selectedProduct.AgeRating</li>
                        <li><strong>Status:</strong> @_selectedProduct.Status</li>
                    </ul>
                    <div class="mt-auto">
                        <ProductSidebar Product="_selectedProduct" />
                    </div>
                </div>
            </div>
        </div>

        <div class="card bg-transparent border border-secondary text-light mb-4 p-4">
            <h5 class="mb-3">Description</h5>
            <p class="mb-0">@_selectedProduct.Description</p>
        </div>

       
        <div class="card bg-transparent border border-secondary text-light mb-4 p-4">
            <h5 class="mb-3">Reviews</h5>
            <ReviewViewer 
            Reviews="_selectedProduct.Reviews" 
            SelectedProduct="_selectedProduct" />
        </div>

        
        <div class="mb-4 text-center">
            <h5 class="text-light mb-3">You might Also Like</h5>
            <RecommendedProducts _cachedProducts="_products" />
        </div>
    </div>
}
else
{
    <LoadingAnimation LoadingText="Loading..." />
}
@code
{
    [Parameter] public string? ProductName { get; set; }

    private bool _loadedImages;
    private List<Product>? _products;
    private Product? _selectedProduct;
    private const string _imageMapKey = "productImageMap";
    private const string _funcTrigger = "https://frolunda-arcadefunc.azurewebsites.net/api/GetImageFunction";
    private bool _showAllReviews = false;
    
    protected override async Task OnParametersSetAsync()
    {

        if(_products == null)
        {
            _products = await GetProductsAsync();
        }
        _selectedProduct = _products.FirstOrDefault(p => p.Name.Equals(ProductName, StringComparison.OrdinalIgnoreCase));
        await AssignImageMaps();
    }

    private async Task<List<Product>?> GetProductsAsync()
    {
        var products = await ProductService.GetAllProductsAsync();
        if (products != null)
        {
            foreach (var product in products)
            {
                product.ImageLink = $"https://i0.wp.com/port2flavors.com/wp-content/uploads/2022/07/placeholder-614.png?fit=1200%2C800&ssl=1";
            }
        }
        return products;
    }

    private async Task AssignImageMaps()
    {
        var rawJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", _imageMapKey);
        Dictionary<string, string>? imageMap = null;

        if (!string.IsNullOrWhiteSpace(rawJson))
            imageMap = JsonSerializer.Deserialize<Dictionary<string, string>>(rawJson);

        if (imageMap == null)
        {
            imageMap = await http.GetFromJsonAsync<Dictionary<string, string>>(_funcTrigger);
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", _imageMapKey,
                JsonSerializer.Serialize(imageMap));
        }

        if (imageMap != null)
        {
            foreach (var product in _products!)
            {
                var matchKey = imageMap.Keys
                 .FirstOrDefault(k =>
                     string.Equals(k, product.Name, StringComparison.OrdinalIgnoreCase)
                 );

                if (matchKey != null && imageMap.TryGetValue(matchKey, out var url))
                {
                    product.ImageLink = url;
                }

            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private int GetAvgRating()
    {
        var avgRating = 0.0;
        var reviewCount = _selectedProduct.Reviews.Count != 0 ? _selectedProduct.Reviews.Count : 1;
        foreach (var review in _selectedProduct.Reviews)
        {
            avgRating += review.Ratings;
        }

        return (int)Math.Round(avgRating / reviewCount);
    }

    private void ToggleReviews()
    {
        _showAllReviews = !_showAllReviews;
    }
}
<link rel="stylesheet" href="css/ProductPageStyle.css" />