@page "/product-page/{ProductName}"
@using Frontend.Components.User.Components
@using Frontend.DummyData
@using Frontend.Models
@using Frontend.Services
@using System.Text.Json
@using Frontend.Services.Interfaces
@using Frontend.Components.Store
@using Frontend.Components.Store.Components
@inject IProductService ProductService
@inject HttpClient http
@inject IJSRuntime JsRuntime

<h3>Product Page</h3>

@if (_selectedProduct is not null)
{
    <div class="container-fluid px-3">
        <div class="row gx-4">
            <!-- Main Product Content -->
            <div class="col-12 col-lg-9 mb-4">
                <!-- Product Card -->
                <div class="product-card p-4 text-light mb-3">
                    <h2 class="product-title">@_selectedProduct.Name</h2>
                    <hr />
                    <div class="row gx-4">
                        <div class="col-12 col-lg-4 d-flex flex-column justify-content-between p-3">
                            <p>@_selectedProduct.Description</p>
                            <div class="product-meta mt-4">
                                <span><strong>Genre:</strong> @_selectedProduct.Genre</span><br />
                                <span><strong>Age Rating:</strong> @_selectedProduct.AgeRating</span><br />
                                <span><strong>Status:</strong> @_selectedProduct.Status</span>
                            </div>
                        </div>
                        <div class="col-12 col-lg-8 d-flex align-items-stretch p-3">
                            <img src="@_selectedProduct.ImageLink" alt="@_selectedProduct.Name" class="img-fluid rounded product-img w-100" />
                        </div>
                    </div>
                </div>

                <!-- Reviews + Related Products -->
                <div class="product-info-card p-4 text-light ">
                    <h5 class="mb-3">Reviews</h5>
                    <div class="row gx-4">
                        <div class="col-12 col-lg-3 p-3">
                            <ReviewViewer Reviews="_selectedProduct.Reviews" SelectedProduct="_selectedProduct" />
                        </div>

                        <div class="col-12 col-lg-9 p-3">
                            <h5 class="mb-3">Related Products</h5>
                            <ProductCarousel Products="_products" AutoScrollInterval="4000" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-3 mb-4">
                    <ProductSidebar Product="_selectedProduct" />
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]public string? ProductName { get; set; }

    private bool _loadedImages;
    private List<Product>? _products;
    private Product? _selectedProduct;
    private const string _imageMapKey = "productImageMap";
    private const string _funcTrigger = "https://frolunda-arcadefunc.azurewebsites.net/api/GetImageFunction";
    private bool _showAllReviews = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        //TODO: Get product first and then get related products
        _products = await GetProductsAsync();

        _selectedProduct = _products.FirstOrDefault(p => p.Name.Equals(ProductName, StringComparison.OrdinalIgnoreCase));

        await AssignImageMaps();
    }

    private async Task<List<Product>?> GetProductsAsync()
    {
        var products = await ProductService.GetAllProductsAsync();
        if (products != null)
        {
            foreach (var product in products)
            {
                product.ImageLink = $"https://i0.wp.com/port2flavors.com/wp-content/uploads/2022/07/placeholder-614.png?fit=1200%2C800&ssl=1";
            }
        }
        return products;
    }

    private async Task AssignImageMaps()
    {
        var rawJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", _imageMapKey);
        Dictionary<string, string>? imageMap = null;

        if (!string.IsNullOrWhiteSpace(rawJson))
            imageMap = JsonSerializer.Deserialize<Dictionary<string, string>>(rawJson);

        if (imageMap == null)
        {
            imageMap = await http.GetFromJsonAsync<Dictionary<string, string>>(_funcTrigger);
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", _imageMapKey,
                JsonSerializer.Serialize(imageMap));
        }

        if (imageMap != null)
        {
            foreach (var product in _products!)
            {
                var matchKey = imageMap.Keys
                 .FirstOrDefault(k =>
                     string.Equals(k, product.Name, StringComparison.OrdinalIgnoreCase)
                 );

                if (matchKey != null && imageMap.TryGetValue(matchKey, out var url))
                {
                    product.ImageLink = url;
                }

            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ToggleReviews()
    {
        _showAllReviews = !_showAllReviews;
    }
}
<link rel="stylesheet" href="css/ProductPageStyle.css" />