@page "/store-front"
@using System.Text.Json
@using Firebase.Auth
@using Frontend.Models
@using Frontend.Services
@using Frontend.Components.Store.Components
@inject HttpClient http
@inject IJSRuntime JsRuntime

<FilterBar Filter="@currentFilter" OnApplyFilters="HandleFilterApplied" />

@if(@filterTest == false){
@foreach (var product in allProducts)
{
    <ProductCard SelectedProduct="@product" />
}}else
@foreach (var product in filteredProducts)
{
        <ProductCard SelectedProduct="@product" />
}

@code {
    private ProductFilter currentFilter = new();
    private List<Product> allProducts = new(); 
    private List<Product> filteredProducts = new();
    private const string _imageMapKey = "productImageMap";
    private const string _funcTrigger = "https://frolunda-arcadefunc.azurewebsites.net/api/GetImageFunction";
    private bool filterTest = false;

    protected override async Task OnInitializedAsync()
    {
        ProductService productService = new ProductService(http, JsRuntime);

        allProducts = await productService.GetAllProductsAsync();

        await AssignImageMaps();

    }

    private void HandleFilterApplied(ProductFilter filter)
    {
        filterTest = true;
        filteredProducts = allProducts
         .Where(p =>
             (string.IsNullOrEmpty(filter.SearchTerm) || p.Name.Contains(filter.SearchTerm, StringComparison.OrdinalIgnoreCase)) &&
             (string.IsNullOrEmpty(filter.SelectedGenre) || p.Genre == filter.SelectedGenre) &&
             (!filter.MinPrice.HasValue || p.Price >= filter.MinPrice.Value) &&
             (!filter.MaxPrice.HasValue || p.Price <= filter.MaxPrice.Value)
         ).ToList();
    }
    
    private async Task AssignImageMaps()
    {
        var rawJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", _imageMapKey);
        Dictionary<string, string>? imageMap = null;

        if (!string.IsNullOrWhiteSpace(rawJson))
            imageMap = JsonSerializer.Deserialize<Dictionary<string, string>>(rawJson);

        if (imageMap == null)
        {
            imageMap = await http.GetFromJsonAsync<Dictionary<string, string>>(_funcTrigger);
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", _imageMapKey,
                JsonSerializer.Serialize(imageMap));
        }

        if (imageMap != null)
        {
            foreach (var product in allProducts!)
            {
                var matchKey = imageMap.Keys
                    .FirstOrDefault(k =>
                        string.Equals(k, product.Name, StringComparison.OrdinalIgnoreCase)
                    );

                if (matchKey != null && imageMap.TryGetValue(matchKey, out var url))
                {
                    product.ImageLink = url;
                }

            }
            await InvokeAsync(StateHasChanged);
        }
    }

}
